syntax = "proto3";

package platformd.workload.v1alpha1;

option go_package = "github.com/spacechunks/explorer-platform/api/platformd/workload/v1alpha1";

service WorkloadService {
  // RunWorkload runs a sandbox with the specified options.
  //
  // the created workload will be reachable from the public
  // internet. programs running in the workload have access to
  // the external network, but cannot be reached from the outside
  // without the program initiating the connection first.
  rpc RunWorkload(RunWorkloadRequest) returns (RunWorkloadResponse);

  rpc WorkloadStatus(WorkloadStatusRequest) returns (WorkloadStatusResponse);
}

message Workload {
  // id is a universally unique value identifying the workload.
  // currently this is in UUIDv7 format.
  string id = 1;

  // name of the workload.
  string name = 2;

  // image is a url pointing to an image living in an oci compatible
  // registry.
  string image = 3;

  // namespace the workload is be created in.
  string namespace = 4;

  // hostname of the pod.
  string hostname = 5;

  // labels applied to the pod.
  map<string, string> labels = 6;

  // the network namespace' mode as per [runtimev1.NamespaceMode].
  int32 network_namespace_mode = 7;
}

enum WorkloadState {
  UNKNOWN = 0;
  STARTING = 1;
  RUNNING = 2;
  DELETING = 3;
  DELETED = 4;
}

message WorkloadStatus {
  WorkloadState state = 1;

  // port allocated for the workload. programs binding
  // to this port will be reachable from the internet.
  uint32 port = 2;
}

message RunWorkloadRequest {
  string name = 1;
  string image = 2;
  string namespace = 3;
  string hostname = 4;
  map<string, string> labels = 5;
  int32 network_namespace_mode = 6;
}

message RunWorkloadResponse {
  Workload workload = 1;
}

message WorkloadStatusRequest {
  string id = 1;
}

message WorkloadStatusResponse {
  WorkloadStatus status = 1;
}