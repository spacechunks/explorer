edition = "2023";

package chunk.v1alpha1;

option go_package = "github.com/spacechunks/explorer/api/chunk/v1alpha1";

import "chunk/v1alpha1/types.proto";
import "platformd/workload/v1alpha2/types.proto";
import "google/protobuf/timestamp.proto";

// ChunkService provides the public api for interacting with Chunks
// and Instances of Chunks.
//
// We differentiate between Chunks and Instances. Chunks define the
// configuration and provide metadata, like a name, description tags
// and so on, that describe the experience the user can expect when
// attempting to run the chunk. Instances on the other hand, describe
// a running replica of a particular Chunk. This means that there can
// be multiple replicas of a chunk by different users.
service ChunkService {
  rpc RunChunk(RunChunkRequest) returns (RunChunkResponse);
  // list chunks
}

message RunChunkRequest {
  string id = 1;
}

message RunChunkResponse {
  Instance instance = 1;
}

/*
 * Instances
 */

service InstanceService {
  rpc GetInstance(GetInstanceRequest) returns (GetInstanceResponse);

  // DiscoverWorkloads returns all workloads that have been scheduled to a node for
  // creation or removal. Platformd identifies itself using its unique node key.
  rpc DiscoverInstances(DiscoverInstanceRequest) returns (DiscoverInstanceResponse);

  // ReceiveWorkloadStatusReports is intended to be called by platformd in order to report
  // status updates back to the control plane.
  rpc ReceiveWorkloadStatusReports(ReceiveWorkloadStatusReportsRequest) returns (ReceiveWorkloadStatusReportResponse);
}

message GetInstanceRequest {
  string id = 1;
}

message GetInstanceResponse {
  Instance instance = 1;
}

message DiscoverInstanceRequest {
  string node_key = 1;
}

message DiscoverInstanceResponse {
  repeated Instance instances = 1;
}

message ReceiveWorkloadStatusReportsRequest {
  repeated platformd.workload.v1alpha2.WorkloadStatus items = 1;
}

message ReceiveWorkloadStatusReportResponse {}
