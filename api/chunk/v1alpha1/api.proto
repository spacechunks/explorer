/*
 Explorer Platform, a platform for hosting and discovering Minecraft servers.
 Copyright (C) 2024 Yannic Rieger <oss@76k.io>

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU Affero General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Affero General Public License for more details.

 You should have received a copy of the GNU Affero General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

edition = "2023";

package chunk.v1alpha1;

option go_package = "github.com/spacechunks/explorer/api/chunk/v1alpha1";

import "chunk/v1alpha1/types.proto";

// ChunkService provides the public api for interacting with Chunks
// and flavors of Chunks.
service ChunkService {
  // CreateChunk creates a new chunk without any flavors.
  // chunks that do not have any flavors will be deleted
  // after some time.
  //
  // Defined error codes:
  // - INVALID_ARGUMENT:
  //   - name is invalid
  //   - too many tags have been provided
  //   - name exceeds the maximum amount of allowed chars
  //   - description exceeds the maximum amount of allowed chars.
  rpc CreateChunk(CreateChunkRequest) returns (CreateChunkResponse);

  // GetChunk returns the chunk specified by the provided id.
  //
  // Defined error codes:
  // - NOT_FOUND:
  //   - chunk with the provided id does not exist
  // - INVALID_ARGUMENT:
  //   - id is invalid
  rpc GetChunk(GetChunkRequest) returns (GetChunkResponse);

  // UpdateChunk updates the fields of the given chunk.
  // Note that tags will be completely replaced with the
  // provided ones.
  //
  // Defined error codes:
  // - NOT_FOUND:
  //   - chunk with the provided id does not exist
  // - INVALID_ARGUMENT:
  //   - chunk id is invalid
  //   - name is invalid
  //   - too many tags have been provided
  //   - name exceeds the maximum amount of allowed chars
  //   - description exceeds the maximum amount of allowed chars.
  rpc UpdateChunk(UpdateChunkRequest) returns (UpdateChunkResponse);

  // ListChunks lists all available Chunks.
  rpc ListChunks(ListChunksRequest) returns (ListChunksResponse);

  // CreateFlavor creates a new flavor for a given chunk.
  //
  // Defined error codes:
  // - ALREADY_EXISTS:
  //   - a flavor with the given name already exists for this chunk
  // - INVALID_ARGUMENT:
  //   - the provided chunk id is invalid
  //   - the provided flavor name is invalid
  rpc CreateFlavor(CreateFlavorRequest) returns (CreateFlavorResponse);

  // ListFlavors lists all the available flavors that belong to a
  // single chunk.
  //
  // Defined error codes:
  // - NOT_FOUND:
  //   - the chunk for which the flavors are requested does not exist
  // - INVALID_ARGUMENT:
  //   - the provided chunk id is invalid
  rpc ListFlavors(ListFlavorsRequest) returns (ListFlavorsResponse);

  // CreateFlavorVersion creates a new flavor version for a
  // given flavor by determining the added, changed and removed
  // files. it also prevents version duplicates, meaning either
  // version numbers or the provided set of files match with
  // an already existing version.
  //
  // Defined error codes:
  // - ALREADY_EXISTS:
  //   - the flavor version about to be created is already present
  //   - a version with the exact same set of files already exists
  // - FAILED_PRECONDITION:
  //   - the provided version hash does not match with the provided file hashes
  rpc CreateFlavorVersion(CreateFlavorVersionRequest) returns (CreateFlavorVersionResponse);

  // SaveFlavorFiles is used to save the added and changed files that have been
  // determined by CreateFlavorVersion to the blob store. Note that ONLY the added
  // and changed files are accepted. If files are missing or unexpected files are
  // present, the request will fail.
  //
  // Defined error codes:
  // - ALREADY_EXISTS:
  //   - files have already been uploaded
  // - FAILED_PRECONDITION:
  //   - the hash of the provided files does not match with the previous determined
  //     hash of all newly added and changed files. this means that some files have
  //     changed after creating the flavor version or are missing.
  rpc SaveFlavorFiles(SaveFlavorFilesRequest) returns (SaveFlavorFilesResponse);
}

message CreateChunkRequest {
  // Name of the chunk. can be up to 50 chars.
  string name = 1;

  // Description briefly describes what the user can
  // expect when running the Chunk. can be up to 100
  // chars.
  string description = 2;

  // Tags categorize the chunk. Possible values could
  // be: pvp, adventure, single-player
  // Note that the limit is currently 4.
  repeated string tags = 3;

  // User owner = 4;
}

message CreateChunkResponse {
  Chunk chunk = 1;
}

message GetChunkRequest {
  string id = 1;
}

message GetChunkResponse {
  Chunk chunk = 1;
}

message UpdateChunkRequest {
  string id = 1;
  string name = 2;
  string description = 3;
  repeated string tags = 4;
}

message UpdateChunkResponse {
  Chunk chunk = 1;
}

message ListChunksRequest {

}

message ListChunksResponse {
  repeated Chunk chunks = 1;
}

message CreateFlavorRequest {
  string chunk_id = 1;
  string name = 2;
}

message CreateFlavorResponse {
  Flavor flavor = 1;
}

message ListFlavorsRequest {
  string chunk_id = 1;
}

message ListFlavorsResponse {
  repeated Flavor flavors = 1;
}

message CreateFlavorVersionRequest {
  FlavorVersion version = 1;
}

message CreateFlavorVersionResponse {
  FlavorVersion version = 1;
  repeated FileHashes changed_files = 2;
  repeated FileHashes removed_files = 3;
  repeated FileHashes added_files = 4;
}

message SaveFlavorFilesRequest {
  string flavor_version_id = 1;
  repeated File files = 2;
}

message SaveFlavorFilesResponse {
}
