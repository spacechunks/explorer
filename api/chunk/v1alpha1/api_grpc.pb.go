//
//Explorer Platform, a platform for hosting and discovering Minecraft servers.
//Copyright (C) 2024 Yannic Rieger <oss@76k.io>
//
//This program is free software: you can redistribute it and/or modify
//it under the terms of the GNU Affero General Public License as published by
//the Free Software Foundation, either version 3 of the License, or
//(at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU Affero General Public License for more details.
//
//You should have received a copy of the GNU Affero General Public License
//along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: chunk/v1alpha1/api.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChunkService_CreateChunk_FullMethodName         = "/chunk.v1alpha1.ChunkService/CreateChunk"
	ChunkService_GetChunk_FullMethodName            = "/chunk.v1alpha1.ChunkService/GetChunk"
	ChunkService_UpdateChunk_FullMethodName         = "/chunk.v1alpha1.ChunkService/UpdateChunk"
	ChunkService_ListChunks_FullMethodName          = "/chunk.v1alpha1.ChunkService/ListChunks"
	ChunkService_CreateFlavor_FullMethodName        = "/chunk.v1alpha1.ChunkService/CreateFlavor"
	ChunkService_CreateFlavorVersion_FullMethodName = "/chunk.v1alpha1.ChunkService/CreateFlavorVersion"
	ChunkService_SaveFlavorFiles_FullMethodName     = "/chunk.v1alpha1.ChunkService/SaveFlavorFiles"
	ChunkService_BuildFlavorVersion_FullMethodName  = "/chunk.v1alpha1.ChunkService/BuildFlavorVersion"
)

// ChunkServiceClient is the client API for ChunkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ChunkService provides the public api for interacting with Chunks
// and flavors of Chunks.
type ChunkServiceClient interface {
	// CreateChunk creates a new chunk without any flavors.
	// chunks that do not have any flavors will be deleted
	// after some time.
	//
	// Defined error codes:
	// - INVALID_ARGUMENT:
	//   - name is invalid
	//   - too many tags have been provided
	//   - name exceeds the maximum amount of allowed chars
	//   - description exceeds the maximum amount of allowed chars.
	CreateChunk(ctx context.Context, in *CreateChunkRequest, opts ...grpc.CallOption) (*CreateChunkResponse, error)
	// GetChunk returns the chunk specified by the provided id.
	//
	// Defined error codes:
	// - NOT_FOUND:
	//   - chunk with the provided id does not exist
	//
	// - INVALID_ARGUMENT:
	//   - id is invalid
	GetChunk(ctx context.Context, in *GetChunkRequest, opts ...grpc.CallOption) (*GetChunkResponse, error)
	// UpdateChunk updates the fields of the given chunk.
	// Note that tags will be completely replaced with the
	// provided ones.
	//
	// Defined error codes:
	// - NOT_FOUND:
	//   - chunk with the provided id does not exist
	//
	// - INVALID_ARGUMENT:
	//   - chunk id is invalid
	//   - name is invalid
	//   - too many tags have been provided
	//   - name exceeds the maximum amount of allowed chars
	//   - description exceeds the maximum amount of allowed chars.
	UpdateChunk(ctx context.Context, in *UpdateChunkRequest, opts ...grpc.CallOption) (*UpdateChunkResponse, error)
	// ListChunks lists all available Chunks.
	ListChunks(ctx context.Context, in *ListChunksRequest, opts ...grpc.CallOption) (*ListChunksResponse, error)
	// CreateFlavor creates a new flavor for a given chunk.
	//
	// Defined error codes:
	// - ALREADY_EXISTS:
	//   - a flavor with the given name already exists for this chunk
	//
	// - INVALID_ARGUMENT:
	//   - the provided chunk id is invalid
	//   - the provided flavor name is invalid
	CreateFlavor(ctx context.Context, in *CreateFlavorRequest, opts ...grpc.CallOption) (*CreateFlavorResponse, error)
	// CreateFlavorVersion creates a new flavor version for a
	// given flavor by determining the added, changed and removed
	// files. it also prevents version duplicates, meaning either
	// version numbers or the provided set of files match with
	// an already existing version.
	//
	// Defined error codes:
	// - ALREADY_EXISTS:
	//   - the flavor version about to be created is already present
	//   - a version with the exact same set of files already exists
	//
	// - FAILED_PRECONDITION:
	//   - the provided version hash does not match with the provided file hashes
	CreateFlavorVersion(ctx context.Context, in *CreateFlavorVersionRequest, opts ...grpc.CallOption) (*CreateFlavorVersionResponse, error)
	// SaveFlavorFiles is used to save the added and changed files that have been
	// determined by CreateFlavorVersion to the blob store. Note that ONLY the added
	// and changed files are accepted. If files are missing or unexpected files are
	// present, the request will fail.
	//
	// Defined error codes:
	// - ALREADY_EXISTS:
	//   - files have already been uploaded
	//
	// - FAILED_PRECONDITION:
	//   - the hash of the provided files does not match with the previous determined
	//     hash of all newly added and changed files. this means that some files have
	//     changed after creating the flavor version or are missing.
	SaveFlavorFiles(ctx context.Context, in *SaveFlavorFilesRequest, opts ...grpc.CallOption) (*SaveFlavorFilesResponse, error)
	BuildFlavorVersion(ctx context.Context, in *BuildFlavorVersionRequest, opts ...grpc.CallOption) (*BuildFlavorVersionResponse, error)
}

type chunkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChunkServiceClient(cc grpc.ClientConnInterface) ChunkServiceClient {
	return &chunkServiceClient{cc}
}

func (c *chunkServiceClient) CreateChunk(ctx context.Context, in *CreateChunkRequest, opts ...grpc.CallOption) (*CreateChunkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateChunkResponse)
	err := c.cc.Invoke(ctx, ChunkService_CreateChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkServiceClient) GetChunk(ctx context.Context, in *GetChunkRequest, opts ...grpc.CallOption) (*GetChunkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChunkResponse)
	err := c.cc.Invoke(ctx, ChunkService_GetChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkServiceClient) UpdateChunk(ctx context.Context, in *UpdateChunkRequest, opts ...grpc.CallOption) (*UpdateChunkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateChunkResponse)
	err := c.cc.Invoke(ctx, ChunkService_UpdateChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkServiceClient) ListChunks(ctx context.Context, in *ListChunksRequest, opts ...grpc.CallOption) (*ListChunksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChunksResponse)
	err := c.cc.Invoke(ctx, ChunkService_ListChunks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkServiceClient) CreateFlavor(ctx context.Context, in *CreateFlavorRequest, opts ...grpc.CallOption) (*CreateFlavorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFlavorResponse)
	err := c.cc.Invoke(ctx, ChunkService_CreateFlavor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkServiceClient) CreateFlavorVersion(ctx context.Context, in *CreateFlavorVersionRequest, opts ...grpc.CallOption) (*CreateFlavorVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFlavorVersionResponse)
	err := c.cc.Invoke(ctx, ChunkService_CreateFlavorVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkServiceClient) SaveFlavorFiles(ctx context.Context, in *SaveFlavorFilesRequest, opts ...grpc.CallOption) (*SaveFlavorFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveFlavorFilesResponse)
	err := c.cc.Invoke(ctx, ChunkService_SaveFlavorFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkServiceClient) BuildFlavorVersion(ctx context.Context, in *BuildFlavorVersionRequest, opts ...grpc.CallOption) (*BuildFlavorVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BuildFlavorVersionResponse)
	err := c.cc.Invoke(ctx, ChunkService_BuildFlavorVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChunkServiceServer is the server API for ChunkService service.
// All implementations must embed UnimplementedChunkServiceServer
// for forward compatibility.
//
// ChunkService provides the public api for interacting with Chunks
// and flavors of Chunks.
type ChunkServiceServer interface {
	// CreateChunk creates a new chunk without any flavors.
	// chunks that do not have any flavors will be deleted
	// after some time.
	//
	// Defined error codes:
	// - INVALID_ARGUMENT:
	//   - name is invalid
	//   - too many tags have been provided
	//   - name exceeds the maximum amount of allowed chars
	//   - description exceeds the maximum amount of allowed chars.
	CreateChunk(context.Context, *CreateChunkRequest) (*CreateChunkResponse, error)
	// GetChunk returns the chunk specified by the provided id.
	//
	// Defined error codes:
	// - NOT_FOUND:
	//   - chunk with the provided id does not exist
	//
	// - INVALID_ARGUMENT:
	//   - id is invalid
	GetChunk(context.Context, *GetChunkRequest) (*GetChunkResponse, error)
	// UpdateChunk updates the fields of the given chunk.
	// Note that tags will be completely replaced with the
	// provided ones.
	//
	// Defined error codes:
	// - NOT_FOUND:
	//   - chunk with the provided id does not exist
	//
	// - INVALID_ARGUMENT:
	//   - chunk id is invalid
	//   - name is invalid
	//   - too many tags have been provided
	//   - name exceeds the maximum amount of allowed chars
	//   - description exceeds the maximum amount of allowed chars.
	UpdateChunk(context.Context, *UpdateChunkRequest) (*UpdateChunkResponse, error)
	// ListChunks lists all available Chunks.
	ListChunks(context.Context, *ListChunksRequest) (*ListChunksResponse, error)
	// CreateFlavor creates a new flavor for a given chunk.
	//
	// Defined error codes:
	// - ALREADY_EXISTS:
	//   - a flavor with the given name already exists for this chunk
	//
	// - INVALID_ARGUMENT:
	//   - the provided chunk id is invalid
	//   - the provided flavor name is invalid
	CreateFlavor(context.Context, *CreateFlavorRequest) (*CreateFlavorResponse, error)
	// CreateFlavorVersion creates a new flavor version for a
	// given flavor by determining the added, changed and removed
	// files. it also prevents version duplicates, meaning either
	// version numbers or the provided set of files match with
	// an already existing version.
	//
	// Defined error codes:
	// - ALREADY_EXISTS:
	//   - the flavor version about to be created is already present
	//   - a version with the exact same set of files already exists
	//
	// - FAILED_PRECONDITION:
	//   - the provided version hash does not match with the provided file hashes
	CreateFlavorVersion(context.Context, *CreateFlavorVersionRequest) (*CreateFlavorVersionResponse, error)
	// SaveFlavorFiles is used to save the added and changed files that have been
	// determined by CreateFlavorVersion to the blob store. Note that ONLY the added
	// and changed files are accepted. If files are missing or unexpected files are
	// present, the request will fail.
	//
	// Defined error codes:
	// - ALREADY_EXISTS:
	//   - files have already been uploaded
	//
	// - FAILED_PRECONDITION:
	//   - the hash of the provided files does not match with the previous determined
	//     hash of all newly added and changed files. this means that some files have
	//     changed after creating the flavor version or are missing.
	SaveFlavorFiles(context.Context, *SaveFlavorFilesRequest) (*SaveFlavorFilesResponse, error)
	BuildFlavorVersion(context.Context, *BuildFlavorVersionRequest) (*BuildFlavorVersionResponse, error)
	mustEmbedUnimplementedChunkServiceServer()
}

// UnimplementedChunkServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChunkServiceServer struct{}

func (UnimplementedChunkServiceServer) CreateChunk(context.Context, *CreateChunkRequest) (*CreateChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChunk not implemented")
}
func (UnimplementedChunkServiceServer) GetChunk(context.Context, *GetChunkRequest) (*GetChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunk not implemented")
}
func (UnimplementedChunkServiceServer) UpdateChunk(context.Context, *UpdateChunkRequest) (*UpdateChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChunk not implemented")
}
func (UnimplementedChunkServiceServer) ListChunks(context.Context, *ListChunksRequest) (*ListChunksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChunks not implemented")
}
func (UnimplementedChunkServiceServer) CreateFlavor(context.Context, *CreateFlavorRequest) (*CreateFlavorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlavor not implemented")
}
func (UnimplementedChunkServiceServer) CreateFlavorVersion(context.Context, *CreateFlavorVersionRequest) (*CreateFlavorVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlavorVersion not implemented")
}
func (UnimplementedChunkServiceServer) SaveFlavorFiles(context.Context, *SaveFlavorFilesRequest) (*SaveFlavorFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveFlavorFiles not implemented")
}
func (UnimplementedChunkServiceServer) BuildFlavorVersion(context.Context, *BuildFlavorVersionRequest) (*BuildFlavorVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildFlavorVersion not implemented")
}
func (UnimplementedChunkServiceServer) mustEmbedUnimplementedChunkServiceServer() {}
func (UnimplementedChunkServiceServer) testEmbeddedByValue()                      {}

// UnsafeChunkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChunkServiceServer will
// result in compilation errors.
type UnsafeChunkServiceServer interface {
	mustEmbedUnimplementedChunkServiceServer()
}

func RegisterChunkServiceServer(s grpc.ServiceRegistrar, srv ChunkServiceServer) {
	// If the following call pancis, it indicates UnimplementedChunkServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChunkService_ServiceDesc, srv)
}

func _ChunkService_CreateChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServiceServer).CreateChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkService_CreateChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServiceServer).CreateChunk(ctx, req.(*CreateChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkService_GetChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServiceServer).GetChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkService_GetChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServiceServer).GetChunk(ctx, req.(*GetChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkService_UpdateChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServiceServer).UpdateChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkService_UpdateChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServiceServer).UpdateChunk(ctx, req.(*UpdateChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkService_ListChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChunksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServiceServer).ListChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkService_ListChunks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServiceServer).ListChunks(ctx, req.(*ListChunksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkService_CreateFlavor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlavorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServiceServer).CreateFlavor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkService_CreateFlavor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServiceServer).CreateFlavor(ctx, req.(*CreateFlavorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkService_CreateFlavorVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlavorVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServiceServer).CreateFlavorVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkService_CreateFlavorVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServiceServer).CreateFlavorVersion(ctx, req.(*CreateFlavorVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkService_SaveFlavorFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveFlavorFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServiceServer).SaveFlavorFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkService_SaveFlavorFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServiceServer).SaveFlavorFiles(ctx, req.(*SaveFlavorFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkService_BuildFlavorVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildFlavorVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServiceServer).BuildFlavorVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkService_BuildFlavorVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServiceServer).BuildFlavorVersion(ctx, req.(*BuildFlavorVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChunkService_ServiceDesc is the grpc.ServiceDesc for ChunkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChunkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chunk.v1alpha1.ChunkService",
	HandlerType: (*ChunkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChunk",
			Handler:    _ChunkService_CreateChunk_Handler,
		},
		{
			MethodName: "GetChunk",
			Handler:    _ChunkService_GetChunk_Handler,
		},
		{
			MethodName: "UpdateChunk",
			Handler:    _ChunkService_UpdateChunk_Handler,
		},
		{
			MethodName: "ListChunks",
			Handler:    _ChunkService_ListChunks_Handler,
		},
		{
			MethodName: "CreateFlavor",
			Handler:    _ChunkService_CreateFlavor_Handler,
		},
		{
			MethodName: "CreateFlavorVersion",
			Handler:    _ChunkService_CreateFlavorVersion_Handler,
		},
		{
			MethodName: "SaveFlavorFiles",
			Handler:    _ChunkService_SaveFlavorFiles_Handler,
		},
		{
			MethodName: "BuildFlavorVersion",
			Handler:    _ChunkService_BuildFlavorVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chunk/v1alpha1/api.proto",
}
