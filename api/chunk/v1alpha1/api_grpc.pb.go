// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: chunk/v1alpha1/api.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChunkService_CreateFlavor_FullMethodName        = "/chunk.v1alpha1.ChunkService/CreateFlavor"
	ChunkService_ListFlavors_FullMethodName         = "/chunk.v1alpha1.ChunkService/ListFlavors"
	ChunkService_CreateFlavorVersion_FullMethodName = "/chunk.v1alpha1.ChunkService/CreateFlavorVersion"
)

// ChunkServiceClient is the client API for ChunkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ChunkService provides the public api for interacting with Chunks
// and flavors of Chunks.
type ChunkServiceClient interface {
	// CreateFlavor creates a new flavor for a given chunk.
	//
	// Defined error codes:
	// - ALREADY_EXISTS:
	//   - a flavor with the given name already exists for this chunk
	//
	// - INVALID_ARGUMENT:
	//   - the provided chunk id is invalid
	//   - the provided flavor name is invalid
	CreateFlavor(ctx context.Context, in *CreateFlavorRequest, opts ...grpc.CallOption) (*CreateFlavorResponse, error)
	ListFlavors(ctx context.Context, in *ListFlavorsRequest, opts ...grpc.CallOption) (*ListFlavorsResponse, error)
	// CreateFlavorVersion creates a new flavor version for a
	// given flavor by determining the added, changed and removed
	// files. it also prevents version duplicates, meaning either
	// version numbers or the provided set of files match with
	// an already existing version.
	//
	// Defined error codes:
	// - ALREADY_EXISTS:
	//   - the flavor version about to be created is already present
	//   - a version with the exact same set of files already exists
	//
	// - FAILED_PRECONDITION:
	//   - the provided version hash does not match with the provided file hashes
	CreateFlavorVersion(ctx context.Context, in *CreateFlavorVersionRequest, opts ...grpc.CallOption) (*CreateFlavorVersionResponse, error)
}

type chunkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChunkServiceClient(cc grpc.ClientConnInterface) ChunkServiceClient {
	return &chunkServiceClient{cc}
}

func (c *chunkServiceClient) CreateFlavor(ctx context.Context, in *CreateFlavorRequest, opts ...grpc.CallOption) (*CreateFlavorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFlavorResponse)
	err := c.cc.Invoke(ctx, ChunkService_CreateFlavor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkServiceClient) ListFlavors(ctx context.Context, in *ListFlavorsRequest, opts ...grpc.CallOption) (*ListFlavorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFlavorsResponse)
	err := c.cc.Invoke(ctx, ChunkService_ListFlavors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkServiceClient) CreateFlavorVersion(ctx context.Context, in *CreateFlavorVersionRequest, opts ...grpc.CallOption) (*CreateFlavorVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFlavorVersionResponse)
	err := c.cc.Invoke(ctx, ChunkService_CreateFlavorVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChunkServiceServer is the server API for ChunkService service.
// All implementations must embed UnimplementedChunkServiceServer
// for forward compatibility.
//
// ChunkService provides the public api for interacting with Chunks
// and flavors of Chunks.
type ChunkServiceServer interface {
	// CreateFlavor creates a new flavor for a given chunk.
	//
	// Defined error codes:
	// - ALREADY_EXISTS:
	//   - a flavor with the given name already exists for this chunk
	//
	// - INVALID_ARGUMENT:
	//   - the provided chunk id is invalid
	//   - the provided flavor name is invalid
	CreateFlavor(context.Context, *CreateFlavorRequest) (*CreateFlavorResponse, error)
	ListFlavors(context.Context, *ListFlavorsRequest) (*ListFlavorsResponse, error)
	// CreateFlavorVersion creates a new flavor version for a
	// given flavor by determining the added, changed and removed
	// files. it also prevents version duplicates, meaning either
	// version numbers or the provided set of files match with
	// an already existing version.
	//
	// Defined error codes:
	// - ALREADY_EXISTS:
	//   - the flavor version about to be created is already present
	//   - a version with the exact same set of files already exists
	//
	// - FAILED_PRECONDITION:
	//   - the provided version hash does not match with the provided file hashes
	CreateFlavorVersion(context.Context, *CreateFlavorVersionRequest) (*CreateFlavorVersionResponse, error)
	mustEmbedUnimplementedChunkServiceServer()
}

// UnimplementedChunkServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChunkServiceServer struct{}

func (UnimplementedChunkServiceServer) CreateFlavor(context.Context, *CreateFlavorRequest) (*CreateFlavorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlavor not implemented")
}
func (UnimplementedChunkServiceServer) ListFlavors(context.Context, *ListFlavorsRequest) (*ListFlavorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlavors not implemented")
}
func (UnimplementedChunkServiceServer) CreateFlavorVersion(context.Context, *CreateFlavorVersionRequest) (*CreateFlavorVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlavorVersion not implemented")
}
func (UnimplementedChunkServiceServer) mustEmbedUnimplementedChunkServiceServer() {}
func (UnimplementedChunkServiceServer) testEmbeddedByValue()                      {}

// UnsafeChunkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChunkServiceServer will
// result in compilation errors.
type UnsafeChunkServiceServer interface {
	mustEmbedUnimplementedChunkServiceServer()
}

func RegisterChunkServiceServer(s grpc.ServiceRegistrar, srv ChunkServiceServer) {
	// If the following call pancis, it indicates UnimplementedChunkServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChunkService_ServiceDesc, srv)
}

func _ChunkService_CreateFlavor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlavorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServiceServer).CreateFlavor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkService_CreateFlavor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServiceServer).CreateFlavor(ctx, req.(*CreateFlavorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkService_ListFlavors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFlavorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServiceServer).ListFlavors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkService_ListFlavors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServiceServer).ListFlavors(ctx, req.(*ListFlavorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkService_CreateFlavorVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlavorVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServiceServer).CreateFlavorVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkService_CreateFlavorVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServiceServer).CreateFlavorVersion(ctx, req.(*CreateFlavorVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChunkService_ServiceDesc is the grpc.ServiceDesc for ChunkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChunkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chunk.v1alpha1.ChunkService",
	HandlerType: (*ChunkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFlavor",
			Handler:    _ChunkService_CreateFlavor_Handler,
		},
		{
			MethodName: "ListFlavors",
			Handler:    _ChunkService_ListFlavors_Handler,
		},
		{
			MethodName: "CreateFlavorVersion",
			Handler:    _ChunkService_CreateFlavorVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chunk/v1alpha1/api.proto",
}
