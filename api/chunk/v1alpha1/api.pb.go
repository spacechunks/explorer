//
//Explorer Platform, a platform for hosting and discovering Minecraft servers.
//Copyright (C) 2024 Yannic Rieger <oss@76k.io>
//
//This program is free software: you can redistribute it and/or modify
//it under the terms of the GNU Affero General Public License as published by
//the Free Software Foundation, either version 3 of the License, or
//(at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU Affero General Public License for more details.
//
//You should have received a copy of the GNU Affero General Public License
//along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: chunk/v1alpha1/api.proto

package v1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateChunkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the chunk. can be up to 50 chars.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Description briefly describes what the user can
	// expect when running the Chunk. can be up to 100
	// chars.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Tags categorize the chunk. Possible values could
	// be: pvp, adventure, single-player
	// Note that the limit is currently 4.
	Tags []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *CreateChunkRequest) Reset() {
	*x = CreateChunkRequest{}
	mi := &file_chunk_v1alpha1_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChunkRequest) ProtoMessage() {}

func (x *CreateChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chunk_v1alpha1_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChunkRequest.ProtoReflect.Descriptor instead.
func (*CreateChunkRequest) Descriptor() ([]byte, []int) {
	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{0}
}

func (x *CreateChunkRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateChunkRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateChunkRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CreateChunkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk *Chunk `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *CreateChunkResponse) Reset() {
	*x = CreateChunkResponse{}
	mi := &file_chunk_v1alpha1_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChunkResponse) ProtoMessage() {}

func (x *CreateChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chunk_v1alpha1_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChunkResponse.ProtoReflect.Descriptor instead.
func (*CreateChunkResponse) Descriptor() ([]byte, []int) {
	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{1}
}

func (x *CreateChunkResponse) GetChunk() *Chunk {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type GetChunkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetChunkRequest) Reset() {
	*x = GetChunkRequest{}
	mi := &file_chunk_v1alpha1_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChunkRequest) ProtoMessage() {}

func (x *GetChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chunk_v1alpha1_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChunkRequest.ProtoReflect.Descriptor instead.
func (*GetChunkRequest) Descriptor() ([]byte, []int) {
	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{2}
}

func (x *GetChunkRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetChunkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk *Chunk `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *GetChunkResponse) Reset() {
	*x = GetChunkResponse{}
	mi := &file_chunk_v1alpha1_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChunkResponse) ProtoMessage() {}

func (x *GetChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chunk_v1alpha1_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChunkResponse.ProtoReflect.Descriptor instead.
func (*GetChunkResponse) Descriptor() ([]byte, []int) {
	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{3}
}

func (x *GetChunkResponse) GetChunk() *Chunk {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type UpdateChunkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Tags        []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *UpdateChunkRequest) Reset() {
	*x = UpdateChunkRequest{}
	mi := &file_chunk_v1alpha1_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChunkRequest) ProtoMessage() {}

func (x *UpdateChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chunk_v1alpha1_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChunkRequest.ProtoReflect.Descriptor instead.
func (*UpdateChunkRequest) Descriptor() ([]byte, []int) {
	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateChunkRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateChunkRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateChunkRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateChunkRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type UpdateChunkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk *Chunk `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *UpdateChunkResponse) Reset() {
	*x = UpdateChunkResponse{}
	mi := &file_chunk_v1alpha1_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChunkResponse) ProtoMessage() {}

func (x *UpdateChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chunk_v1alpha1_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChunkResponse.ProtoReflect.Descriptor instead.
func (*UpdateChunkResponse) Descriptor() ([]byte, []int) {
	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateChunkResponse) GetChunk() *Chunk {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type ListChunksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListChunksRequest) Reset() {
	*x = ListChunksRequest{}
	mi := &file_chunk_v1alpha1_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListChunksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChunksRequest) ProtoMessage() {}

func (x *ListChunksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chunk_v1alpha1_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChunksRequest.ProtoReflect.Descriptor instead.
func (*ListChunksRequest) Descriptor() ([]byte, []int) {
	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{6}
}

type ListChunksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunks []*Chunk `protobuf:"bytes,1,rep,name=chunks,proto3" json:"chunks,omitempty"`
}

func (x *ListChunksResponse) Reset() {
	*x = ListChunksResponse{}
	mi := &file_chunk_v1alpha1_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListChunksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChunksResponse) ProtoMessage() {}

func (x *ListChunksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chunk_v1alpha1_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChunksResponse.ProtoReflect.Descriptor instead.
func (*ListChunksResponse) Descriptor() ([]byte, []int) {
	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{7}
}

func (x *ListChunksResponse) GetChunks() []*Chunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

type CreateFlavorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkId string `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateFlavorRequest) Reset() {
	*x = CreateFlavorRequest{}
	mi := &file_chunk_v1alpha1_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFlavorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlavorRequest) ProtoMessage() {}

func (x *CreateFlavorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chunk_v1alpha1_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlavorRequest.ProtoReflect.Descriptor instead.
func (*CreateFlavorRequest) Descriptor() ([]byte, []int) {
	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{8}
}

func (x *CreateFlavorRequest) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *CreateFlavorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateFlavorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flavor *Flavor `protobuf:"bytes,1,opt,name=flavor,proto3" json:"flavor,omitempty"`
}

func (x *CreateFlavorResponse) Reset() {
	*x = CreateFlavorResponse{}
	mi := &file_chunk_v1alpha1_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFlavorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlavorResponse) ProtoMessage() {}

func (x *CreateFlavorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chunk_v1alpha1_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlavorResponse.ProtoReflect.Descriptor instead.
func (*CreateFlavorResponse) Descriptor() ([]byte, []int) {
	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{9}
}

func (x *CreateFlavorResponse) GetFlavor() *Flavor {
	if x != nil {
		return x.Flavor
	}
	return nil
}

type CreateFlavorVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlavorId string         `protobuf:"bytes,1,opt,name=flavor_id,json=flavorId,proto3" json:"flavor_id,omitempty"`
	Version  *FlavorVersion `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *CreateFlavorVersionRequest) Reset() {
	*x = CreateFlavorVersionRequest{}
	mi := &file_chunk_v1alpha1_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFlavorVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlavorVersionRequest) ProtoMessage() {}

func (x *CreateFlavorVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chunk_v1alpha1_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlavorVersionRequest.ProtoReflect.Descriptor instead.
func (*CreateFlavorVersionRequest) Descriptor() ([]byte, []int) {
	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{10}
}

func (x *CreateFlavorVersionRequest) GetFlavorId() string {
	if x != nil {
		return x.FlavorId
	}
	return ""
}

func (x *CreateFlavorVersionRequest) GetVersion() *FlavorVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

type CreateFlavorVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version      *FlavorVersion `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	ChangedFiles []*FileHashes  `protobuf:"bytes,2,rep,name=changed_files,json=changedFiles,proto3" json:"changed_files,omitempty"`
	RemovedFiles []*FileHashes  `protobuf:"bytes,3,rep,name=removed_files,json=removedFiles,proto3" json:"removed_files,omitempty"`
	AddedFiles   []*FileHashes  `protobuf:"bytes,4,rep,name=added_files,json=addedFiles,proto3" json:"added_files,omitempty"`
}

func (x *CreateFlavorVersionResponse) Reset() {
	*x = CreateFlavorVersionResponse{}
	mi := &file_chunk_v1alpha1_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFlavorVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlavorVersionResponse) ProtoMessage() {}

func (x *CreateFlavorVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chunk_v1alpha1_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlavorVersionResponse.ProtoReflect.Descriptor instead.
func (*CreateFlavorVersionResponse) Descriptor() ([]byte, []int) {
	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{11}
}

func (x *CreateFlavorVersionResponse) GetVersion() *FlavorVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *CreateFlavorVersionResponse) GetChangedFiles() []*FileHashes {
	if x != nil {
		return x.ChangedFiles
	}
	return nil
}

func (x *CreateFlavorVersionResponse) GetRemovedFiles() []*FileHashes {
	if x != nil {
		return x.RemovedFiles
	}
	return nil
}

func (x *CreateFlavorVersionResponse) GetAddedFiles() []*FileHashes {
	if x != nil {
		return x.AddedFiles
	}
	return nil
}

type SaveFlavorFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlavorVersionId string  `protobuf:"bytes,1,opt,name=flavor_version_id,json=flavorVersionId,proto3" json:"flavor_version_id,omitempty"`
	Files           []*File `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *SaveFlavorFilesRequest) Reset() {
	*x = SaveFlavorFilesRequest{}
	mi := &file_chunk_v1alpha1_api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveFlavorFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveFlavorFilesRequest) ProtoMessage() {}

func (x *SaveFlavorFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chunk_v1alpha1_api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveFlavorFilesRequest.ProtoReflect.Descriptor instead.
func (*SaveFlavorFilesRequest) Descriptor() ([]byte, []int) {
	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{12}
}

func (x *SaveFlavorFilesRequest) GetFlavorVersionId() string {
	if x != nil {
		return x.FlavorVersionId
	}
	return ""
}

func (x *SaveFlavorFilesRequest) GetFiles() []*File {
	if x != nil {
		return x.Files
	}
	return nil
}

type SaveFlavorFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SaveFlavorFilesResponse) Reset() {
	*x = SaveFlavorFilesResponse{}
	mi := &file_chunk_v1alpha1_api_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveFlavorFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveFlavorFilesResponse) ProtoMessage() {}

func (x *SaveFlavorFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chunk_v1alpha1_api_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveFlavorFilesResponse.ProtoReflect.Descriptor instead.
func (*SaveFlavorFilesResponse) Descriptor() ([]byte, []int) {
	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{13}
}

var File_chunk_v1alpha1_api_proto protoreflect.FileDescriptor

var file_chunk_v1alpha1_api_proto_rawDesc = []byte{
	0x0a, 0x18, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1a, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5e, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x42, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x21, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3f, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x6e,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x42,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x05, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x22, 0x13, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a,
	0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x52, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x22, 0x44, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x46, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x66, 0x6c,
	0x61, 0x76, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x76,
	0x6f, 0x72, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x22, 0x72, 0x0a, 0x1a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x76,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6c, 0x61,
	0x76, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x95,
	0x02, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x64, 0x64,
	0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x70, 0x0a, 0x16, 0x53, 0x61, 0x76, 0x65, 0x46, 0x6c,
	0x61, 0x76, 0x6f, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x6c, 0x61,
	0x76, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x05,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x61, 0x76, 0x65,
	0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0x91, 0x05, 0x0a, 0x0c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x12, 0x22, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1f, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x22, 0x2e, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x12, 0x21, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x23, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61,
	0x76, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c,
	0x61, 0x76, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0f, 0x53, 0x61, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f,
	0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x76,
	0x6f, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x53, 0x61, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x2f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chunk_v1alpha1_api_proto_rawDescOnce sync.Once
	file_chunk_v1alpha1_api_proto_rawDescData = file_chunk_v1alpha1_api_proto_rawDesc
)

func file_chunk_v1alpha1_api_proto_rawDescGZIP() []byte {
	file_chunk_v1alpha1_api_proto_rawDescOnce.Do(func() {
		file_chunk_v1alpha1_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_chunk_v1alpha1_api_proto_rawDescData)
	})
	return file_chunk_v1alpha1_api_proto_rawDescData
}

var file_chunk_v1alpha1_api_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_chunk_v1alpha1_api_proto_goTypes = []any{
	(*CreateChunkRequest)(nil),          // 0: chunk.v1alpha1.CreateChunkRequest
	(*CreateChunkResponse)(nil),         // 1: chunk.v1alpha1.CreateChunkResponse
	(*GetChunkRequest)(nil),             // 2: chunk.v1alpha1.GetChunkRequest
	(*GetChunkResponse)(nil),            // 3: chunk.v1alpha1.GetChunkResponse
	(*UpdateChunkRequest)(nil),          // 4: chunk.v1alpha1.UpdateChunkRequest
	(*UpdateChunkResponse)(nil),         // 5: chunk.v1alpha1.UpdateChunkResponse
	(*ListChunksRequest)(nil),           // 6: chunk.v1alpha1.ListChunksRequest
	(*ListChunksResponse)(nil),          // 7: chunk.v1alpha1.ListChunksResponse
	(*CreateFlavorRequest)(nil),         // 8: chunk.v1alpha1.CreateFlavorRequest
	(*CreateFlavorResponse)(nil),        // 9: chunk.v1alpha1.CreateFlavorResponse
	(*CreateFlavorVersionRequest)(nil),  // 10: chunk.v1alpha1.CreateFlavorVersionRequest
	(*CreateFlavorVersionResponse)(nil), // 11: chunk.v1alpha1.CreateFlavorVersionResponse
	(*SaveFlavorFilesRequest)(nil),      // 12: chunk.v1alpha1.SaveFlavorFilesRequest
	(*SaveFlavorFilesResponse)(nil),     // 13: chunk.v1alpha1.SaveFlavorFilesResponse
	(*Chunk)(nil),                       // 14: chunk.v1alpha1.Chunk
	(*Flavor)(nil),                      // 15: chunk.v1alpha1.Flavor
	(*FlavorVersion)(nil),               // 16: chunk.v1alpha1.FlavorVersion
	(*FileHashes)(nil),                  // 17: chunk.v1alpha1.FileHashes
	(*File)(nil),                        // 18: chunk.v1alpha1.File
}
var file_chunk_v1alpha1_api_proto_depIdxs = []int32{
	14, // 0: chunk.v1alpha1.CreateChunkResponse.chunk:type_name -> chunk.v1alpha1.Chunk
	14, // 1: chunk.v1alpha1.GetChunkResponse.chunk:type_name -> chunk.v1alpha1.Chunk
	14, // 2: chunk.v1alpha1.UpdateChunkResponse.chunk:type_name -> chunk.v1alpha1.Chunk
	14, // 3: chunk.v1alpha1.ListChunksResponse.chunks:type_name -> chunk.v1alpha1.Chunk
	15, // 4: chunk.v1alpha1.CreateFlavorResponse.flavor:type_name -> chunk.v1alpha1.Flavor
	16, // 5: chunk.v1alpha1.CreateFlavorVersionRequest.version:type_name -> chunk.v1alpha1.FlavorVersion
	16, // 6: chunk.v1alpha1.CreateFlavorVersionResponse.version:type_name -> chunk.v1alpha1.FlavorVersion
	17, // 7: chunk.v1alpha1.CreateFlavorVersionResponse.changed_files:type_name -> chunk.v1alpha1.FileHashes
	17, // 8: chunk.v1alpha1.CreateFlavorVersionResponse.removed_files:type_name -> chunk.v1alpha1.FileHashes
	17, // 9: chunk.v1alpha1.CreateFlavorVersionResponse.added_files:type_name -> chunk.v1alpha1.FileHashes
	18, // 10: chunk.v1alpha1.SaveFlavorFilesRequest.files:type_name -> chunk.v1alpha1.File
	0,  // 11: chunk.v1alpha1.ChunkService.CreateChunk:input_type -> chunk.v1alpha1.CreateChunkRequest
	2,  // 12: chunk.v1alpha1.ChunkService.GetChunk:input_type -> chunk.v1alpha1.GetChunkRequest
	4,  // 13: chunk.v1alpha1.ChunkService.UpdateChunk:input_type -> chunk.v1alpha1.UpdateChunkRequest
	6,  // 14: chunk.v1alpha1.ChunkService.ListChunks:input_type -> chunk.v1alpha1.ListChunksRequest
	8,  // 15: chunk.v1alpha1.ChunkService.CreateFlavor:input_type -> chunk.v1alpha1.CreateFlavorRequest
	10, // 16: chunk.v1alpha1.ChunkService.CreateFlavorVersion:input_type -> chunk.v1alpha1.CreateFlavorVersionRequest
	12, // 17: chunk.v1alpha1.ChunkService.SaveFlavorFiles:input_type -> chunk.v1alpha1.SaveFlavorFilesRequest
	1,  // 18: chunk.v1alpha1.ChunkService.CreateChunk:output_type -> chunk.v1alpha1.CreateChunkResponse
	3,  // 19: chunk.v1alpha1.ChunkService.GetChunk:output_type -> chunk.v1alpha1.GetChunkResponse
	5,  // 20: chunk.v1alpha1.ChunkService.UpdateChunk:output_type -> chunk.v1alpha1.UpdateChunkResponse
	7,  // 21: chunk.v1alpha1.ChunkService.ListChunks:output_type -> chunk.v1alpha1.ListChunksResponse
	9,  // 22: chunk.v1alpha1.ChunkService.CreateFlavor:output_type -> chunk.v1alpha1.CreateFlavorResponse
	11, // 23: chunk.v1alpha1.ChunkService.CreateFlavorVersion:output_type -> chunk.v1alpha1.CreateFlavorVersionResponse
	13, // 24: chunk.v1alpha1.ChunkService.SaveFlavorFiles:output_type -> chunk.v1alpha1.SaveFlavorFilesResponse
	18, // [18:25] is the sub-list for method output_type
	11, // [11:18] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_chunk_v1alpha1_api_proto_init() }
func file_chunk_v1alpha1_api_proto_init() {
	if File_chunk_v1alpha1_api_proto != nil {
		return
	}
	file_chunk_v1alpha1_types_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chunk_v1alpha1_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chunk_v1alpha1_api_proto_goTypes,
		DependencyIndexes: file_chunk_v1alpha1_api_proto_depIdxs,
		MessageInfos:      file_chunk_v1alpha1_api_proto_msgTypes,
	}.Build()
	File_chunk_v1alpha1_api_proto = out.File
	file_chunk_v1alpha1_api_proto_rawDesc = nil
	file_chunk_v1alpha1_api_proto_goTypes = nil
	file_chunk_v1alpha1_api_proto_depIdxs = nil
}
