diff --git a/api/chunk/v1alpha1/api.pb.go b/api/chunk/v1alpha1/api.pb.go
index ae55035..80172a7 100644
--- a/api/chunk/v1alpha1/api.pb.go
+++ b/api/chunk/v1alpha1/api.pb.go
@@ -89,6 +89,96 @@ func (x *CreateChunkRequest) GetTags() []string {
 	return nil
 }
 
+type GetChunkRequest struct {
+	state         protoimpl.MessageState
+	sizeCache     protoimpl.SizeCache
+	unknownFields protoimpl.UnknownFields
+
+	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
+}
+
+func (x *GetChunkRequest) Reset() {
+	*x = GetChunkRequest{}
+	mi := &file_chunk_v1alpha1_api_proto_msgTypes[1]
+	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+	ms.StoreMessageInfo(mi)
+}
+
+func (x *GetChunkRequest) String() string {
+	return protoimpl.X.MessageStringOf(x)
+}
+
+func (*GetChunkRequest) ProtoMessage() {}
+
+func (x *GetChunkRequest) ProtoReflect() protoreflect.Message {
+	mi := &file_chunk_v1alpha1_api_proto_msgTypes[1]
+	if x != nil {
+		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+		if ms.LoadMessageInfo() == nil {
+			ms.StoreMessageInfo(mi)
+		}
+		return ms
+	}
+	return mi.MessageOf(x)
+}
+
+// Deprecated: Use GetChunkRequest.ProtoReflect.Descriptor instead.
+func (*GetChunkRequest) Descriptor() ([]byte, []int) {
+	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{1}
+}
+
+func (x *GetChunkRequest) GetId() string {
+	if x != nil && x.Id != nil {
+		return *x.Id
+	}
+	return ""
+}
+
+type GetChunkResponse struct {
+	state         protoimpl.MessageState
+	sizeCache     protoimpl.SizeCache
+	unknownFields protoimpl.UnknownFields
+
+	Chunk *Chunk `protobuf:"bytes,1,opt,name=chunk" json:"chunk,omitempty"`
+}
+
+func (x *GetChunkResponse) Reset() {
+	*x = GetChunkResponse{}
+	mi := &file_chunk_v1alpha1_api_proto_msgTypes[2]
+	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+	ms.StoreMessageInfo(mi)
+}
+
+func (x *GetChunkResponse) String() string {
+	return protoimpl.X.MessageStringOf(x)
+}
+
+func (*GetChunkResponse) ProtoMessage() {}
+
+func (x *GetChunkResponse) ProtoReflect() protoreflect.Message {
+	mi := &file_chunk_v1alpha1_api_proto_msgTypes[2]
+	if x != nil {
+		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
+		if ms.LoadMessageInfo() == nil {
+			ms.StoreMessageInfo(mi)
+		}
+		return ms
+	}
+	return mi.MessageOf(x)
+}
+
+// Deprecated: Use GetChunkResponse.ProtoReflect.Descriptor instead.
+func (*GetChunkResponse) Descriptor() ([]byte, []int) {
+	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{2}
+}
+
+func (x *GetChunkResponse) GetChunk() *Chunk {
+	if x != nil {
+		return x.Chunk
+	}
+	return nil
+}
+
 type CreateChunkResponse struct {
 	state         protoimpl.MessageState
 	sizeCache     protoimpl.SizeCache
@@ -99,7 +189,7 @@ type CreateChunkResponse struct {
 
 func (x *CreateChunkResponse) Reset() {
 	*x = CreateChunkResponse{}
-	mi := &file_chunk_v1alpha1_api_proto_msgTypes[1]
+	mi := &file_chunk_v1alpha1_api_proto_msgTypes[3]
 	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 	ms.StoreMessageInfo(mi)
 }
@@ -111,7 +201,7 @@ func (x *CreateChunkResponse) String() string {
 func (*CreateChunkResponse) ProtoMessage() {}
 
 func (x *CreateChunkResponse) ProtoReflect() protoreflect.Message {
-	mi := &file_chunk_v1alpha1_api_proto_msgTypes[1]
+	mi := &file_chunk_v1alpha1_api_proto_msgTypes[3]
 	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
@@ -124,7 +214,7 @@ func (x *CreateChunkResponse) ProtoReflect() protoreflect.Message {
 
 // Deprecated: Use CreateChunkResponse.ProtoReflect.Descriptor instead.
 func (*CreateChunkResponse) Descriptor() ([]byte, []int) {
-	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{1}
+	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{3}
 }
 
 func (x *CreateChunkResponse) GetChunk() *Chunk {
@@ -145,7 +235,7 @@ type CreateFlavorRequest struct {
 
 func (x *CreateFlavorRequest) Reset() {
 	*x = CreateFlavorRequest{}
-	mi := &file_chunk_v1alpha1_api_proto_msgTypes[2]
+	mi := &file_chunk_v1alpha1_api_proto_msgTypes[4]
 	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 	ms.StoreMessageInfo(mi)
 }
@@ -157,7 +247,7 @@ func (x *CreateFlavorRequest) String() string {
 func (*CreateFlavorRequest) ProtoMessage() {}
 
 func (x *CreateFlavorRequest) ProtoReflect() protoreflect.Message {
-	mi := &file_chunk_v1alpha1_api_proto_msgTypes[2]
+	mi := &file_chunk_v1alpha1_api_proto_msgTypes[4]
 	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
@@ -170,7 +260,7 @@ func (x *CreateFlavorRequest) ProtoReflect() protoreflect.Message {
 
 // Deprecated: Use CreateFlavorRequest.ProtoReflect.Descriptor instead.
 func (*CreateFlavorRequest) Descriptor() ([]byte, []int) {
-	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{2}
+	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{4}
 }
 
 func (x *CreateFlavorRequest) GetChunkId() string {
@@ -197,7 +287,7 @@ type CreateFlavorResponse struct {
 
 func (x *CreateFlavorResponse) Reset() {
 	*x = CreateFlavorResponse{}
-	mi := &file_chunk_v1alpha1_api_proto_msgTypes[3]
+	mi := &file_chunk_v1alpha1_api_proto_msgTypes[5]
 	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 	ms.StoreMessageInfo(mi)
 }
@@ -209,7 +299,7 @@ func (x *CreateFlavorResponse) String() string {
 func (*CreateFlavorResponse) ProtoMessage() {}
 
 func (x *CreateFlavorResponse) ProtoReflect() protoreflect.Message {
-	mi := &file_chunk_v1alpha1_api_proto_msgTypes[3]
+	mi := &file_chunk_v1alpha1_api_proto_msgTypes[5]
 	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
@@ -222,7 +312,7 @@ func (x *CreateFlavorResponse) ProtoReflect() protoreflect.Message {
 
 // Deprecated: Use CreateFlavorResponse.ProtoReflect.Descriptor instead.
 func (*CreateFlavorResponse) Descriptor() ([]byte, []int) {
-	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{3}
+	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{5}
 }
 
 func (x *CreateFlavorResponse) GetFlavor() *Flavor {
@@ -242,7 +332,7 @@ type ListFlavorsRequest struct {
 
 func (x *ListFlavorsRequest) Reset() {
 	*x = ListFlavorsRequest{}
-	mi := &file_chunk_v1alpha1_api_proto_msgTypes[4]
+	mi := &file_chunk_v1alpha1_api_proto_msgTypes[6]
 	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 	ms.StoreMessageInfo(mi)
 }
@@ -254,7 +344,7 @@ func (x *ListFlavorsRequest) String() string {
 func (*ListFlavorsRequest) ProtoMessage() {}
 
 func (x *ListFlavorsRequest) ProtoReflect() protoreflect.Message {
-	mi := &file_chunk_v1alpha1_api_proto_msgTypes[4]
+	mi := &file_chunk_v1alpha1_api_proto_msgTypes[6]
 	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
@@ -267,7 +357,7 @@ func (x *ListFlavorsRequest) ProtoReflect() protoreflect.Message {
 
 // Deprecated: Use ListFlavorsRequest.ProtoReflect.Descriptor instead.
 func (*ListFlavorsRequest) Descriptor() ([]byte, []int) {
-	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{4}
+	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{6}
 }
 
 func (x *ListFlavorsRequest) GetChunkId() string {
@@ -287,7 +377,7 @@ type ListFlavorsResponse struct {
 
 func (x *ListFlavorsResponse) Reset() {
 	*x = ListFlavorsResponse{}
-	mi := &file_chunk_v1alpha1_api_proto_msgTypes[5]
+	mi := &file_chunk_v1alpha1_api_proto_msgTypes[7]
 	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 	ms.StoreMessageInfo(mi)
 }
@@ -299,7 +389,7 @@ func (x *ListFlavorsResponse) String() string {
 func (*ListFlavorsResponse) ProtoMessage() {}
 
 func (x *ListFlavorsResponse) ProtoReflect() protoreflect.Message {
-	mi := &file_chunk_v1alpha1_api_proto_msgTypes[5]
+	mi := &file_chunk_v1alpha1_api_proto_msgTypes[7]
 	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
@@ -312,7 +402,7 @@ func (x *ListFlavorsResponse) ProtoReflect() protoreflect.Message {
 
 // Deprecated: Use ListFlavorsResponse.ProtoReflect.Descriptor instead.
 func (*ListFlavorsResponse) Descriptor() ([]byte, []int) {
-	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{5}
+	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{7}
 }
 
 func (x *ListFlavorsResponse) GetFlavors() []*Flavor {
@@ -332,7 +422,7 @@ type CreateFlavorVersionRequest struct {
 
 func (x *CreateFlavorVersionRequest) Reset() {
 	*x = CreateFlavorVersionRequest{}
-	mi := &file_chunk_v1alpha1_api_proto_msgTypes[6]
+	mi := &file_chunk_v1alpha1_api_proto_msgTypes[8]
 	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 	ms.StoreMessageInfo(mi)
 }
@@ -344,7 +434,7 @@ func (x *CreateFlavorVersionRequest) String() string {
 func (*CreateFlavorVersionRequest) ProtoMessage() {}
 
 func (x *CreateFlavorVersionRequest) ProtoReflect() protoreflect.Message {
-	mi := &file_chunk_v1alpha1_api_proto_msgTypes[6]
+	mi := &file_chunk_v1alpha1_api_proto_msgTypes[8]
 	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
@@ -357,7 +447,7 @@ func (x *CreateFlavorVersionRequest) ProtoReflect() protoreflect.Message {
 
 // Deprecated: Use CreateFlavorVersionRequest.ProtoReflect.Descriptor instead.
 func (*CreateFlavorVersionRequest) Descriptor() ([]byte, []int) {
-	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{6}
+	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{8}
 }
 
 func (x *CreateFlavorVersionRequest) GetVersion() *FlavorVersion {
@@ -380,7 +470,7 @@ type CreateFlavorVersionResponse struct {
 
 func (x *CreateFlavorVersionResponse) Reset() {
 	*x = CreateFlavorVersionResponse{}
-	mi := &file_chunk_v1alpha1_api_proto_msgTypes[7]
+	mi := &file_chunk_v1alpha1_api_proto_msgTypes[9]
 	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 	ms.StoreMessageInfo(mi)
 }
@@ -392,7 +482,7 @@ func (x *CreateFlavorVersionResponse) String() string {
 func (*CreateFlavorVersionResponse) ProtoMessage() {}
 
 func (x *CreateFlavorVersionResponse) ProtoReflect() protoreflect.Message {
-	mi := &file_chunk_v1alpha1_api_proto_msgTypes[7]
+	mi := &file_chunk_v1alpha1_api_proto_msgTypes[9]
 	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
@@ -405,7 +495,7 @@ func (x *CreateFlavorVersionResponse) ProtoReflect() protoreflect.Message {
 
 // Deprecated: Use CreateFlavorVersionResponse.ProtoReflect.Descriptor instead.
 func (*CreateFlavorVersionResponse) Descriptor() ([]byte, []int) {
-	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{7}
+	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{9}
 }
 
 func (x *CreateFlavorVersionResponse) GetVersion() *FlavorVersion {
@@ -447,7 +537,7 @@ type SaveFlavorFilesRequest struct {
 
 func (x *SaveFlavorFilesRequest) Reset() {
 	*x = SaveFlavorFilesRequest{}
-	mi := &file_chunk_v1alpha1_api_proto_msgTypes[8]
+	mi := &file_chunk_v1alpha1_api_proto_msgTypes[10]
 	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 	ms.StoreMessageInfo(mi)
 }
@@ -459,7 +549,7 @@ func (x *SaveFlavorFilesRequest) String() string {
 func (*SaveFlavorFilesRequest) ProtoMessage() {}
 
 func (x *SaveFlavorFilesRequest) ProtoReflect() protoreflect.Message {
-	mi := &file_chunk_v1alpha1_api_proto_msgTypes[8]
+	mi := &file_chunk_v1alpha1_api_proto_msgTypes[10]
 	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
@@ -472,7 +562,7 @@ func (x *SaveFlavorFilesRequest) ProtoReflect() protoreflect.Message {
 
 // Deprecated: Use SaveFlavorFilesRequest.ProtoReflect.Descriptor instead.
 func (*SaveFlavorFilesRequest) Descriptor() ([]byte, []int) {
-	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{8}
+	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{10}
 }
 
 func (x *SaveFlavorFilesRequest) GetFlavorVersionId() string {
@@ -497,7 +587,7 @@ type SaveFlavorFilesResponse struct {
 
 func (x *SaveFlavorFilesResponse) Reset() {
 	*x = SaveFlavorFilesResponse{}
-	mi := &file_chunk_v1alpha1_api_proto_msgTypes[9]
+	mi := &file_chunk_v1alpha1_api_proto_msgTypes[11]
 	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 	ms.StoreMessageInfo(mi)
 }
@@ -509,7 +599,7 @@ func (x *SaveFlavorFilesResponse) String() string {
 func (*SaveFlavorFilesResponse) ProtoMessage() {}
 
 func (x *SaveFlavorFilesResponse) ProtoReflect() protoreflect.Message {
-	mi := &file_chunk_v1alpha1_api_proto_msgTypes[9]
+	mi := &file_chunk_v1alpha1_api_proto_msgTypes[11]
 	if x != nil {
 		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
 		if ms.LoadMessageInfo() == nil {
@@ -522,7 +612,7 @@ func (x *SaveFlavorFilesResponse) ProtoReflect() protoreflect.Message {
 
 // Deprecated: Use SaveFlavorFilesResponse.ProtoReflect.Descriptor instead.
 func (*SaveFlavorFilesResponse) Descriptor() ([]byte, []int) {
-	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{9}
+	return file_chunk_v1alpha1_api_proto_rawDescGZIP(), []int{11}
 }
 
 var File_chunk_v1alpha1_api_proto protoreflect.FileDescriptor
@@ -538,95 +628,106 @@ var file_chunk_v1alpha1_api_proto_rawDesc = []byte{
 	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
 	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
 	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
-	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x42, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
+	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x21, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75,
+	0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
+	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3f, 0x0a, 0x10, 0x47, 0x65, 0x74,
 	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
 	0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
 	0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68,
-	0x75, 0x6e, 0x6b, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x44, 0x0a, 0x13, 0x43, 0x72,
-	0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
-	0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
-	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
-	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
-	0x22, 0x46, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72,
-	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x66, 0x6c, 0x61, 0x76,
-	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b,
-	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72,
-	0x52, 0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x22, 0x2f, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74,
-	0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
-	0x0a, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
-	0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x13, 0x4c, 0x69, 0x73,
-	0x74, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
-	0x12, 0x30, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
-	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
-	0x61, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x76, 0x6f,
-	0x72, 0x73, 0x22, 0x55, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76,
-	0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
-	0x12, 0x37, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
-	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
-	0x61, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
-	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x95, 0x02, 0x0a, 0x1b, 0x43, 0x72,
-	0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
-	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x76, 0x65, 0x72,
-	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x75,
-	0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x76,
-	0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
-	0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x66, 0x69,
-	0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x75, 0x6e,
-	0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x48,
-	0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x46, 0x69,
-	0x6c, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x66,
-	0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x75,
-	0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65,
-	0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x46,
-	0x69, 0x6c, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x66, 0x69,
-	0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x75, 0x6e,
-	0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x48,
-	0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
-	0x73, 0x22, 0x70, 0x0a, 0x16, 0x53, 0x61, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x46,
-	0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66,
-	0x6c, 0x61, 0x76, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
-	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x56, 0x65,
-	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73,
-	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76,
-	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69,
-	0x6c, 0x65, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x61, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f,
-	0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xed,
-	0x03, 0x0a, 0x0c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
-	0x56, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x22,
+	0x75, 0x6e, 0x6b, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x42, 0x0a, 0x13, 0x43, 0x72,
+	0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
+	0x65, 0x12, 0x2b, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
+	0x32, 0x15, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
+	0x31, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x44,
+	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x65,
+	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69,
+	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64,
+	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
+	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c,
+	0x61, 0x76, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06,
+	0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
+	0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x6c,
+	0x61, 0x76, 0x6f, 0x72, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x22, 0x2f, 0x0a, 0x12,
+	0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
+	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
+	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x22, 0x47, 0x0a,
+	0x13, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
+	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x73, 0x18,
+	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31,
+	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x07, 0x66,
+	0x6c, 0x61, 0x76, 0x6f, 0x72, 0x73, 0x22, 0x55, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
+	0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
+	0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
+	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31,
+	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x56, 0x65, 0x72,
+	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x95, 0x02,
+	0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x56, 0x65,
+	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
+	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
 	0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
-	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
-	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
+	0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76,
+	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
+	0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
+	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46,
+	0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67,
+	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76,
+	0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
+	0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
+	0x46, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f,
+	0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x65,
+	0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
+	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46,
+	0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x65, 0x64,
+	0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x70, 0x0a, 0x16, 0x53, 0x61, 0x76, 0x65, 0x46, 0x6c, 0x61,
+	0x76, 0x6f, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
+	0x2a, 0x0a, 0x11, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
+	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x6c, 0x61, 0x76,
+	0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x66,
+	0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x68, 0x75,
+	0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65,
+	0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x61, 0x76, 0x65, 0x46,
+	0x6c, 0x61, 0x76, 0x6f, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
+	0x73, 0x65, 0x32, 0xbc, 0x04, 0x0a, 0x0c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76,
+	0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75,
+	0x6e, 0x6b, 0x12, 0x22, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
 	0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52,
-	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74,
-	0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x23, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e,
-	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
-	0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63,
-	0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72,
-	0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
-	0x73, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72,
-	0x73, 0x12, 0x22, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
-	0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x73, 0x52, 0x65,
-	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31,
-	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x76, 0x6f,
-	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x13, 0x43, 0x72,
-	0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
-	0x6e, 0x12, 0x2a, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
-	0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x56,
-	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
-	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
-	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
-	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0f, 0x53, 0x61,
-	0x76, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x2e,
-	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53,
-	0x61, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
-	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31,
-	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f,
-	0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x34,
-	0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x61,
-	0x63, 0x65, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65,
-	0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x61, 0x6c,
-	0x70, 0x68, 0x61, 0x31, 0x62, 0x08, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0xe8,
-	0x07,
+	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76,
+	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68,
+	0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x47,
+	0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1f, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e,
+	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e,
+	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b,
+	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75,
+	0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0c, 0x43, 0x72,
+	0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x23, 0x2e, 0x63, 0x68, 0x75,
+	0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
+	0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
+	0x24, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
+	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x65, 0x73,
+	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61,
+	0x76, 0x6f, 0x72, 0x73, 0x12, 0x22, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61,
+	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72,
+	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b,
+	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c,
+	0x61, 0x76, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a,
+	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x56, 0x65, 0x72,
+	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61,
+	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76,
+	0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
+	0x1a, 0x2b, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
+	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x56, 0x65,
+	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a,
+	0x0f, 0x53, 0x61, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73,
+	0x12, 0x26, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
+	0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x46, 0x69, 0x6c, 0x65,
+	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b,
+	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x46, 0x6c,
+	0x61, 0x76, 0x6f, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
+	0x65, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
+	0x73, 0x70, 0x61, 0x63, 0x65, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x6c,
+	0x6f, 0x72, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2f, 0x76,
+	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x08, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
+	0x73, 0x70, 0xe8, 0x07,
 }
 
 var (
@@ -641,49 +742,54 @@ func file_chunk_v1alpha1_api_proto_rawDescGZIP() []byte {
 	return file_chunk_v1alpha1_api_proto_rawDescData
 }
 
-var file_chunk_v1alpha1_api_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
+var file_chunk_v1alpha1_api_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
 var file_chunk_v1alpha1_api_proto_goTypes = []any{
 	(*CreateChunkRequest)(nil),          // 0: chunk.v1alpha1.CreateChunkRequest
-	(*CreateChunkResponse)(nil),         // 1: chunk.v1alpha1.CreateChunkResponse
-	(*CreateFlavorRequest)(nil),         // 2: chunk.v1alpha1.CreateFlavorRequest
-	(*CreateFlavorResponse)(nil),        // 3: chunk.v1alpha1.CreateFlavorResponse
-	(*ListFlavorsRequest)(nil),          // 4: chunk.v1alpha1.ListFlavorsRequest
-	(*ListFlavorsResponse)(nil),         // 5: chunk.v1alpha1.ListFlavorsResponse
-	(*CreateFlavorVersionRequest)(nil),  // 6: chunk.v1alpha1.CreateFlavorVersionRequest
-	(*CreateFlavorVersionResponse)(nil), // 7: chunk.v1alpha1.CreateFlavorVersionResponse
-	(*SaveFlavorFilesRequest)(nil),      // 8: chunk.v1alpha1.SaveFlavorFilesRequest
-	(*SaveFlavorFilesResponse)(nil),     // 9: chunk.v1alpha1.SaveFlavorFilesResponse
-	(*Chunk)(nil),                       // 10: chunk.v1alpha1.Chunk
-	(*Flavor)(nil),                      // 11: chunk.v1alpha1.Flavor
-	(*FlavorVersion)(nil),               // 12: chunk.v1alpha1.FlavorVersion
-	(*FileHashes)(nil),                  // 13: chunk.v1alpha1.FileHashes
-	(*File)(nil),                        // 14: chunk.v1alpha1.File
+	(*GetChunkRequest)(nil),             // 1: chunk.v1alpha1.GetChunkRequest
+	(*GetChunkResponse)(nil),            // 2: chunk.v1alpha1.GetChunkResponse
+	(*CreateChunkResponse)(nil),         // 3: chunk.v1alpha1.CreateChunkResponse
+	(*CreateFlavorRequest)(nil),         // 4: chunk.v1alpha1.CreateFlavorRequest
+	(*CreateFlavorResponse)(nil),        // 5: chunk.v1alpha1.CreateFlavorResponse
+	(*ListFlavorsRequest)(nil),          // 6: chunk.v1alpha1.ListFlavorsRequest
+	(*ListFlavorsResponse)(nil),         // 7: chunk.v1alpha1.ListFlavorsResponse
+	(*CreateFlavorVersionRequest)(nil),  // 8: chunk.v1alpha1.CreateFlavorVersionRequest
+	(*CreateFlavorVersionResponse)(nil), // 9: chunk.v1alpha1.CreateFlavorVersionResponse
+	(*SaveFlavorFilesRequest)(nil),      // 10: chunk.v1alpha1.SaveFlavorFilesRequest
+	(*SaveFlavorFilesResponse)(nil),     // 11: chunk.v1alpha1.SaveFlavorFilesResponse
+	(*Chunk)(nil),                       // 12: chunk.v1alpha1.Chunk
+	(*Flavor)(nil),                      // 13: chunk.v1alpha1.Flavor
+	(*FlavorVersion)(nil),               // 14: chunk.v1alpha1.FlavorVersion
+	(*FileHashes)(nil),                  // 15: chunk.v1alpha1.FileHashes
+	(*File)(nil),                        // 16: chunk.v1alpha1.File
 }
 var file_chunk_v1alpha1_api_proto_depIdxs = []int32{
-	10, // 0: chunk.v1alpha1.CreateChunkResponse.chunk:type_name -> chunk.v1alpha1.Chunk
-	11, // 1: chunk.v1alpha1.CreateFlavorResponse.flavor:type_name -> chunk.v1alpha1.Flavor
-	11, // 2: chunk.v1alpha1.ListFlavorsResponse.flavors:type_name -> chunk.v1alpha1.Flavor
-	12, // 3: chunk.v1alpha1.CreateFlavorVersionRequest.version:type_name -> chunk.v1alpha1.FlavorVersion
-	12, // 4: chunk.v1alpha1.CreateFlavorVersionResponse.version:type_name -> chunk.v1alpha1.FlavorVersion
-	13, // 5: chunk.v1alpha1.CreateFlavorVersionResponse.changed_files:type_name -> chunk.v1alpha1.FileHashes
-	13, // 6: chunk.v1alpha1.CreateFlavorVersionResponse.removed_files:type_name -> chunk.v1alpha1.FileHashes
-	13, // 7: chunk.v1alpha1.CreateFlavorVersionResponse.added_files:type_name -> chunk.v1alpha1.FileHashes
-	14, // 8: chunk.v1alpha1.SaveFlavorFilesRequest.files:type_name -> chunk.v1alpha1.File
-	0,  // 9: chunk.v1alpha1.ChunkService.CreateChunk:input_type -> chunk.v1alpha1.CreateChunkRequest
-	2,  // 10: chunk.v1alpha1.ChunkService.CreateFlavor:input_type -> chunk.v1alpha1.CreateFlavorRequest
-	4,  // 11: chunk.v1alpha1.ChunkService.ListFlavors:input_type -> chunk.v1alpha1.ListFlavorsRequest
-	6,  // 12: chunk.v1alpha1.ChunkService.CreateFlavorVersion:input_type -> chunk.v1alpha1.CreateFlavorVersionRequest
-	8,  // 13: chunk.v1alpha1.ChunkService.SaveFlavorFiles:input_type -> chunk.v1alpha1.SaveFlavorFilesRequest
-	1,  // 14: chunk.v1alpha1.ChunkService.CreateChunk:output_type -> chunk.v1alpha1.CreateChunkResponse
-	3,  // 15: chunk.v1alpha1.ChunkService.CreateFlavor:output_type -> chunk.v1alpha1.CreateFlavorResponse
-	5,  // 16: chunk.v1alpha1.ChunkService.ListFlavors:output_type -> chunk.v1alpha1.ListFlavorsResponse
-	7,  // 17: chunk.v1alpha1.ChunkService.CreateFlavorVersion:output_type -> chunk.v1alpha1.CreateFlavorVersionResponse
-	9,  // 18: chunk.v1alpha1.ChunkService.SaveFlavorFiles:output_type -> chunk.v1alpha1.SaveFlavorFilesResponse
-	14, // [14:19] is the sub-list for method output_type
-	9,  // [9:14] is the sub-list for method input_type
-	9,  // [9:9] is the sub-list for extension type_name
-	9,  // [9:9] is the sub-list for extension extendee
-	0,  // [0:9] is the sub-list for field type_name
+	12, // 0: chunk.v1alpha1.GetChunkResponse.chunk:type_name -> chunk.v1alpha1.Chunk
+	12, // 1: chunk.v1alpha1.CreateChunkResponse.chunk:type_name -> chunk.v1alpha1.Chunk
+	13, // 2: chunk.v1alpha1.CreateFlavorResponse.flavor:type_name -> chunk.v1alpha1.Flavor
+	13, // 3: chunk.v1alpha1.ListFlavorsResponse.flavors:type_name -> chunk.v1alpha1.Flavor
+	14, // 4: chunk.v1alpha1.CreateFlavorVersionRequest.version:type_name -> chunk.v1alpha1.FlavorVersion
+	14, // 5: chunk.v1alpha1.CreateFlavorVersionResponse.version:type_name -> chunk.v1alpha1.FlavorVersion
+	15, // 6: chunk.v1alpha1.CreateFlavorVersionResponse.changed_files:type_name -> chunk.v1alpha1.FileHashes
+	15, // 7: chunk.v1alpha1.CreateFlavorVersionResponse.removed_files:type_name -> chunk.v1alpha1.FileHashes
+	15, // 8: chunk.v1alpha1.CreateFlavorVersionResponse.added_files:type_name -> chunk.v1alpha1.FileHashes
+	16, // 9: chunk.v1alpha1.SaveFlavorFilesRequest.files:type_name -> chunk.v1alpha1.File
+	0,  // 10: chunk.v1alpha1.ChunkService.CreateChunk:input_type -> chunk.v1alpha1.CreateChunkRequest
+	1,  // 11: chunk.v1alpha1.ChunkService.GetChunk:input_type -> chunk.v1alpha1.GetChunkRequest
+	4,  // 12: chunk.v1alpha1.ChunkService.CreateFlavor:input_type -> chunk.v1alpha1.CreateFlavorRequest
+	6,  // 13: chunk.v1alpha1.ChunkService.ListFlavors:input_type -> chunk.v1alpha1.ListFlavorsRequest
+	8,  // 14: chunk.v1alpha1.ChunkService.CreateFlavorVersion:input_type -> chunk.v1alpha1.CreateFlavorVersionRequest
+	10, // 15: chunk.v1alpha1.ChunkService.SaveFlavorFiles:input_type -> chunk.v1alpha1.SaveFlavorFilesRequest
+	3,  // 16: chunk.v1alpha1.ChunkService.CreateChunk:output_type -> chunk.v1alpha1.CreateChunkResponse
+	2,  // 17: chunk.v1alpha1.ChunkService.GetChunk:output_type -> chunk.v1alpha1.GetChunkResponse
+	5,  // 18: chunk.v1alpha1.ChunkService.CreateFlavor:output_type -> chunk.v1alpha1.CreateFlavorResponse
+	7,  // 19: chunk.v1alpha1.ChunkService.ListFlavors:output_type -> chunk.v1alpha1.ListFlavorsResponse
+	9,  // 20: chunk.v1alpha1.ChunkService.CreateFlavorVersion:output_type -> chunk.v1alpha1.CreateFlavorVersionResponse
+	11, // 21: chunk.v1alpha1.ChunkService.SaveFlavorFiles:output_type -> chunk.v1alpha1.SaveFlavorFilesResponse
+	16, // [16:22] is the sub-list for method output_type
+	10, // [10:16] is the sub-list for method input_type
+	10, // [10:10] is the sub-list for extension type_name
+	10, // [10:10] is the sub-list for extension extendee
+	0,  // [0:10] is the sub-list for field type_name
 }
 
 func init() { file_chunk_v1alpha1_api_proto_init() }
@@ -698,7 +804,7 @@ func file_chunk_v1alpha1_api_proto_init() {
 			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
 			RawDescriptor: file_chunk_v1alpha1_api_proto_rawDesc,
 			NumEnums:      0,
-			NumMessages:   10,
+			NumMessages:   12,
 			NumExtensions: 0,
 			NumServices:   1,
 		},
diff --git a/api/chunk/v1alpha1/api.proto b/api/chunk/v1alpha1/api.proto
index 20e4862..3428d1c 100644
--- a/api/chunk/v1alpha1/api.proto
+++ b/api/chunk/v1alpha1/api.proto
@@ -39,6 +39,15 @@ service ChunkService {
   //   - description exceeds the maximum amount of allowed chars.
   rpc CreateChunk(CreateChunkRequest) returns (CreateChunkResponse);
 
+  // GetChunk returns the chunk specified by the provided id.
+  //
+  // Defined error codes:
+  // - NOT_FOUND:
+  //   - chunk with the provided id does not exist
+  // - INVALID_ARGUMENT:
+  //   - id is invalid
+  rpc GetChunk(GetChunkRequest) returns (GetChunkResponse);
+
   // CreateFlavor creates a new flavor for a given chunk.
   //
   // Defined error codes:
@@ -105,6 +114,14 @@ message CreateChunkRequest {
   // User owner = 4;
 }
 
+message GetChunkRequest {
+  string id = 1;
+}
+
+message GetChunkResponse {
+  Chunk chunk = 1;
+}
+
 message CreateChunkResponse {
   Chunk chunk = 1;
 }
diff --git a/api/chunk/v1alpha1/api_grpc.pb.go b/api/chunk/v1alpha1/api_grpc.pb.go
index 4c4da5e..d86b00b 100644
--- a/api/chunk/v1alpha1/api_grpc.pb.go
+++ b/api/chunk/v1alpha1/api_grpc.pb.go
@@ -21,6 +21,7 @@ const _ = grpc.SupportPackageIsVersion9
 
 const (
 	ChunkService_CreateChunk_FullMethodName         = "/chunk.v1alpha1.ChunkService/CreateChunk"
+	ChunkService_GetChunk_FullMethodName            = "/chunk.v1alpha1.ChunkService/GetChunk"
 	ChunkService_CreateFlavor_FullMethodName        = "/chunk.v1alpha1.ChunkService/CreateFlavor"
 	ChunkService_ListFlavors_FullMethodName         = "/chunk.v1alpha1.ChunkService/ListFlavors"
 	ChunkService_CreateFlavorVersion_FullMethodName = "/chunk.v1alpha1.ChunkService/CreateFlavorVersion"
@@ -45,6 +46,7 @@ type ChunkServiceClient interface {
 	//   - name exceeds the maximum amount of allowed chars
 	//   - description exceeds the maximum amount of allowed chars.
 	CreateChunk(ctx context.Context, in *CreateChunkRequest, opts ...grpc.CallOption) (*CreateChunkResponse, error)
+	GetChunk(ctx context.Context, in *GetChunkRequest, opts ...grpc.CallOption) (*GetChunkResponse, error)
 	// CreateFlavor creates a new flavor for a given chunk.
 	//
 	// Defined error codes:
@@ -113,6 +115,16 @@ func (c *chunkServiceClient) CreateChunk(ctx context.Context, in *CreateChunkReq
 	return out, nil
 }
 
+func (c *chunkServiceClient) GetChunk(ctx context.Context, in *GetChunkRequest, opts ...grpc.CallOption) (*GetChunkResponse, error) {
+	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
+	out := new(GetChunkResponse)
+	err := c.cc.Invoke(ctx, ChunkService_GetChunk_FullMethodName, in, out, cOpts...)
+	if err != nil {
+		return nil, err
+	}
+	return out, nil
+}
+
 func (c *chunkServiceClient) CreateFlavor(ctx context.Context, in *CreateFlavorRequest, opts ...grpc.CallOption) (*CreateFlavorResponse, error) {
 	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
 	out := new(CreateFlavorResponse)
@@ -171,6 +183,7 @@ type ChunkServiceServer interface {
 	//   - name exceeds the maximum amount of allowed chars
 	//   - description exceeds the maximum amount of allowed chars.
 	CreateChunk(context.Context, *CreateChunkRequest) (*CreateChunkResponse, error)
+	GetChunk(context.Context, *GetChunkRequest) (*GetChunkResponse, error)
 	// CreateFlavor creates a new flavor for a given chunk.
 	//
 	// Defined error codes:
@@ -232,6 +245,9 @@ type UnimplementedChunkServiceServer struct{}
 func (UnimplementedChunkServiceServer) CreateChunk(context.Context, *CreateChunkRequest) (*CreateChunkResponse, error) {
 	return nil, status.Errorf(codes.Unimplemented, "method CreateChunk not implemented")
 }
+func (UnimplementedChunkServiceServer) GetChunk(context.Context, *GetChunkRequest) (*GetChunkResponse, error) {
+	return nil, status.Errorf(codes.Unimplemented, "method GetChunk not implemented")
+}
 func (UnimplementedChunkServiceServer) CreateFlavor(context.Context, *CreateFlavorRequest) (*CreateFlavorResponse, error) {
 	return nil, status.Errorf(codes.Unimplemented, "method CreateFlavor not implemented")
 }
@@ -283,6 +299,24 @@ func _ChunkService_CreateChunk_Handler(srv interface{}, ctx context.Context, dec
 	return interceptor(ctx, in, info, handler)
 }
 
+func _ChunkService_GetChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
+	in := new(GetChunkRequest)
+	if err := dec(in); err != nil {
+		return nil, err
+	}
+	if interceptor == nil {
+		return srv.(ChunkServiceServer).GetChunk(ctx, in)
+	}
+	info := &grpc.UnaryServerInfo{
+		Server:     srv,
+		FullMethod: ChunkService_GetChunk_FullMethodName,
+	}
+	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
+		return srv.(ChunkServiceServer).GetChunk(ctx, req.(*GetChunkRequest))
+	}
+	return interceptor(ctx, in, info, handler)
+}
+
 func _ChunkService_CreateFlavor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
 	in := new(CreateFlavorRequest)
 	if err := dec(in); err != nil {
@@ -366,6 +400,10 @@ var ChunkService_ServiceDesc = grpc.ServiceDesc{
 			MethodName: "CreateChunk",
 			Handler:    _ChunkService_CreateChunk_Handler,
 		},
+		{
+			MethodName: "GetChunk",
+			Handler:    _ChunkService_GetChunk_Handler,
+		},
 		{
 			MethodName: "CreateFlavor",
 			Handler:    _ChunkService_CreateFlavor_Handler,
diff --git a/controlplane/chunk/server.go b/controlplane/chunk/server.go
index d61bc77..c906d79 100644
--- a/controlplane/chunk/server.go
+++ b/controlplane/chunk/server.go
@@ -71,6 +71,24 @@ func (s *Server) CreateChunk(
 	}, nil
 }
 
+func (s *Server) GetChunk(
+	ctx context.Context,
+	req *chunkv1alpha1.GetChunkRequest,
+) (*chunkv1alpha1.GetChunkResponse, error) {
+	if req.GetId() == "" {
+		return nil, ErrInvalidChunkID
+	}
+
+	c, err := s.service.GetChunk(ctx, req.GetId())
+	if err != nil {
+		return nil, err
+	}
+
+	return &chunkv1alpha1.GetChunkResponse{
+		Chunk: ChunkToTransport(c),
+	}, nil
+}
+
 func (s *Server) CreateFlavor(
 	ctx context.Context,
 	req *chunkv1alpha1.CreateFlavorRequest,
diff --git a/controlplane/postgres/chunk.go b/controlplane/postgres/chunk.go
index 2aa1a5f..e324096 100644
--- a/controlplane/postgres/chunk.go
+++ b/controlplane/postgres/chunk.go
@@ -61,7 +61,7 @@ func (db *DB) GetChunkByID(ctx context.Context, id string) (chunk.Chunk, error)
 		}
 
 		if len(rows) == 0 {
-			return ErrNotFound
+			return chunk.ErrChunkNotFound
 		}
 
 		var (
diff --git a/test/functional/chunk_api_test.go b/test/functional/chunk_api_test.go
index 49a7a12..8de6e89 100644
--- a/test/functional/chunk_api_test.go
+++ b/test/functional/chunk_api_test.go
@@ -119,6 +119,85 @@ func TestAPICreateChunk(t *testing.T) {
 	}
 }
 
+func TestGetChunk(t *testing.T) {
+	tests := []struct {
+		name   string
+		create bool
+		err    error
+	}{
+		{
+			name:   "works",
+			create: true,
+		},
+		{
+			name: "not found",
+			err:  chunk.ErrChunkNotFound,
+		},
+		{
+			name: "invalid id",
+			err:  chunk.ErrInvalidChunkID,
+		},
+	}
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			var (
+				ctx = context.Background()
+				pg  = fixture.NewPostgres()
+				c   = fixture.Chunk()
+			)
+
+			fixture.RunControlPlane(t, pg)
+
+			if tt.create {
+				_, err := pg.DB.CreateChunk(ctx, c)
+				require.NoError(t, err)
+
+				for _, f := range fixture.Chunk().Flavors {
+					_, err := pg.DB.CreateFlavor(ctx, c.ID, f)
+					require.NoError(t, err)
+				}
+			}
+
+			conn, err := grpc.NewClient(
+				fixture.ControlPlaneAddr,
+				grpc.WithTransportCredentials(insecure.NewCredentials()),
+			)
+			require.NoError(t, err)
+
+			client := chunkv1alpha1.NewChunkServiceClient(conn)
+
+			if tt.err == chunk.ErrChunkNotFound {
+				c.ID = test.NewUUIDv7(t)
+			}
+
+			if tt.err == chunk.ErrInvalidChunkID {
+				c.ID = ""
+			}
+
+			resp, err := client.GetChunk(ctx, &chunkv1alpha1.GetChunkRequest{
+				Id: &c.ID,
+			})
+
+			if tt.err != nil {
+				require.ErrorIs(t, err, tt.err)
+				return
+			}
+
+			require.NoError(t, err)
+
+			if d := cmp.Diff(
+				chunk.ChunkToTransport(c),
+				resp.GetChunk(),
+				protocmp.Transform(),
+				test.IgnoredProtoChunkFields,
+				test.IgnoredProtoFlavorFields,
+			); d != "" {
+				t.Fatalf("diff (-want +got):\n%s", d)
+			}
+		})
+	}
+}
+
 func TestCreateFlavor(t *testing.T) {
 	c := fixture.Chunk()
 	tests := []struct {
