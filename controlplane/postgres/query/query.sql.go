// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package query

import (
	"context"
)

const createChunk = `-- name: CreateChunk :one
/*
 * Explorer Platform, a platform for hosting and discovering Minecraft servers.
 * Copyright (C) 2024 Yannic Rieger <oss@76k.io>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

INSERT INTO chunks
    (id, name, description, tags)
VALUES
    ($1, $2, $3, $4)
RETURNING id, name, description, tags, created_at, updated_at
`

type CreateChunkParams struct {
	ID          string
	Name        string
	Description string
	Tags        []string
}

func (q *Queries) CreateChunk(ctx context.Context, arg CreateChunkParams) (Chunk, error) {
	row := q.db.QueryRow(ctx, createChunk,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Tags,
	)
	var i Chunk
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Tags,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChunkByID = `-- name: GetChunkByID :one
SELECT id, name, description, tags, created_at, updated_at FROM chunks WHERE id = $1
`

func (q *Queries) GetChunkByID(ctx context.Context, id string) (Chunk, error) {
	row := q.db.QueryRow(ctx, getChunkByID, id)
	var i Chunk
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Tags,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateChunk = `-- name: UpdateChunk :one
UPDATE chunks
SET
    name = $1,
    description = $2,
    tags = $3,
    updated_at = now()
WHERE id = $4
RETURNING id, name, description, tags, created_at, updated_at
`

type UpdateChunkParams struct {
	Name        string
	Description string
	Tags        []string
	ID          string
}

func (q *Queries) UpdateChunk(ctx context.Context, arg UpdateChunkParams) (Chunk, error) {
	row := q.db.QueryRow(ctx, updateChunk,
		arg.Name,
		arg.Description,
		arg.Tags,
		arg.ID,
	)
	var i Chunk
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Tags,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
