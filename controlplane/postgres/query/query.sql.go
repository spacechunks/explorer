// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package query

import (
	"context"
	"net/netip"
	"time"
)

const chunkExists = `-- name: ChunkExists :one
SELECT EXISTS(
    SELECT 1 FROM chunks
    WHERE id = $1
)
`

func (q *Queries) ChunkExists(ctx context.Context, id string) (bool, error) {
	row := q.db.QueryRow(ctx, chunkExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createChunk = `-- name: CreateChunk :one
/*
 * CHUNKS
 */

INSERT INTO chunks
    (id, name, description, tags, created_at, updated_at)
VALUES
    ($1, $2, $3, $4, $5, $6)
RETURNING id, name, description, tags, created_at, updated_at
`

type CreateChunkParams struct {
	ID          string
	Name        string
	Description string
	Tags        []string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateChunk(ctx context.Context, arg CreateChunkParams) (Chunk, error) {
	row := q.db.QueryRow(ctx, createChunk,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Tags,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Chunk
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Tags,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createFlavor = `-- name: CreateFlavor :exec
/*
 * FLAVORS
 */

INSERT INTO flavors
    (id, chunk_id, name, created_at, updated_at)
VALUES
    ($1, $2, $3, $4, $5)
`

type CreateFlavorParams struct {
	ID        string
	ChunkID   string
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

// TODO: insert multiple (aka :batchmany)
func (q *Queries) CreateFlavor(ctx context.Context, arg CreateFlavorParams) error {
	_, err := q.db.Exec(ctx, createFlavor,
		arg.ID,
		arg.ChunkID,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const createFlavorVersion = `-- name: CreateFlavorVersion :exec
INSERT INTO flavor_versions
    (id, flavor_id, hash, version, prev_version_id, created_at)
VALUES
    ($1, $2, $3, $4, $5, $6)
`

type CreateFlavorVersionParams struct {
	ID            string
	FlavorID      string
	Hash          string
	Version       string
	PrevVersionID *string
	CreatedAt     time.Time
}

func (q *Queries) CreateFlavorVersion(ctx context.Context, arg CreateFlavorVersionParams) error {
	_, err := q.db.Exec(ctx, createFlavorVersion,
		arg.ID,
		arg.FlavorID,
		arg.Hash,
		arg.Version,
		arg.PrevVersionID,
		arg.CreatedAt,
	)
	return err
}

const createInstance = `-- name: CreateInstance :exec
/*
 * INSTANCES
 */

INSERT INTO instances
    (id, chunk_id, flavor_id, node_id, state, created_at, updated_at)
VALUES
    ($1, $2, $3, $4, $5, $6, $7)
`

type CreateInstanceParams struct {
	ID        string
	ChunkID   string
	FlavorID  string
	NodeID    string
	State     InstanceState
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateInstance(ctx context.Context, arg CreateInstanceParams) error {
	_, err := q.db.Exec(ctx, createInstance,
		arg.ID,
		arg.ChunkID,
		arg.FlavorID,
		arg.NodeID,
		arg.State,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const flavorNameExists = `-- name: FlavorNameExists :one
SELECT EXISTS(
    SELECT 1 FROM flavors
    WHERE name = $1 AND chunk_id = $2
)
`

type FlavorNameExistsParams struct {
	Name    string
	ChunkID string
}

func (q *Queries) FlavorNameExists(ctx context.Context, arg FlavorNameExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, flavorNameExists, arg.Name, arg.ChunkID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const flavorVersionByHash = `-- name: FlavorVersionByHash :one
SELECT version FROM flavor_versions WHERE hash = $1
`

func (q *Queries) FlavorVersionByHash(ctx context.Context, hash string) (string, error) {
	row := q.db.QueryRow(ctx, flavorVersionByHash, hash)
	var version string
	err := row.Scan(&version)
	return version, err
}

const flavorVersionExists = `-- name: FlavorVersionExists :one
SELECT EXISTS(
    SELECT 1 FROM flavor_versions
    WHERE version = $1 AND flavor_id = $2
)
`

type FlavorVersionExistsParams struct {
	Version  string
	FlavorID string
}

func (q *Queries) FlavorVersionExists(ctx context.Context, arg FlavorVersionExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, flavorVersionExists, arg.Version, arg.FlavorID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const flavorVersionFileHashes = `-- name: FlavorVersionFileHashes :many
SELECT flavor_version_id, file_hash, file_path, created_at FROM flavor_version_files WHERE flavor_version_id = $1
`

func (q *Queries) FlavorVersionFileHashes(ctx context.Context, flavorVersionID string) ([]FlavorVersionFile, error) {
	rows, err := q.db.Query(ctx, flavorVersionFileHashes, flavorVersionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FlavorVersionFile
	for rows.Next() {
		var i FlavorVersionFile
		if err := rows.Scan(
			&i.FlavorVersionID,
			&i.FileHash,
			&i.FilePath,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChunkByID = `-- name: GetChunkByID :many
SELECT c.id, c.name, description, tags, c.created_at, c.updated_at, f.id, chunk_id, f.name, f.created_at, f.updated_at FROM chunks c
    JOIN flavors f ON f.chunk_id = c.id
WHERE c.id = $1
`

type GetChunkByIDRow struct {
	ID          string
	Name        string
	Description string
	Tags        []string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	ID_2        string
	ChunkID     string
	Name_2      string
	CreatedAt_2 time.Time
	UpdatedAt_2 time.Time
}

// TODO: read multiple
func (q *Queries) GetChunkByID(ctx context.Context, id string) ([]GetChunkByIDRow, error) {
	rows, err := q.db.Query(ctx, getChunkByID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetChunkByIDRow
	for rows.Next() {
		var i GetChunkByIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Tags,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.ChunkID,
			&i.Name_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInstance = `-- name: GetInstance :many
SELECT i.id, i.chunk_id, flavor_id, node_id, port, state, i.created_at, i.updated_at, f.id, f.chunk_id, f.name, f.created_at, f.updated_at, c.id, c.name, description, tags, c.created_at, c.updated_at, n.id, address, n.created_at FROM instances i
    JOIN flavors f ON i.chunk_id = f.chunk_id
    JOIN chunks c ON f.chunk_id = c.id
    JOIN nodes n ON i.node_id = n.id
WHERE i.id = $1
`

type GetInstanceRow struct {
	ID          string
	ChunkID     string
	FlavorID    string
	NodeID      string
	Port        *int32
	State       InstanceState
	CreatedAt   time.Time
	UpdatedAt   time.Time
	ID_2        string
	ChunkID_2   string
	Name        string
	CreatedAt_2 time.Time
	UpdatedAt_2 time.Time
	ID_3        string
	Name_2      string
	Description string
	Tags        []string
	CreatedAt_3 time.Time
	UpdatedAt_3 time.Time
	ID_4        string
	Address     netip.Addr
	CreatedAt_4 time.Time
}

func (q *Queries) GetInstance(ctx context.Context, id string) ([]GetInstanceRow, error) {
	rows, err := q.db.Query(ctx, getInstance, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetInstanceRow
	for rows.Next() {
		var i GetInstanceRow
		if err := rows.Scan(
			&i.ID,
			&i.ChunkID,
			&i.FlavorID,
			&i.NodeID,
			&i.Port,
			&i.State,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.ChunkID_2,
			&i.Name,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.ID_3,
			&i.Name_2,
			&i.Description,
			&i.Tags,
			&i.CreatedAt_3,
			&i.UpdatedAt_3,
			&i.ID_4,
			&i.Address,
			&i.CreatedAt_4,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInstancesByNodeID = `-- name: GetInstancesByNodeID :many
SELECT i.id, i.chunk_id, flavor_id, node_id, port, state, i.created_at, i.updated_at, f.id, f.chunk_id, f.name, f.created_at, f.updated_at, c.id, c.name, description, tags, c.created_at, c.updated_at, n.id, address, n.created_at FROM instances i
    JOIN flavors f ON i.flavor_id = f.id
    JOIN chunks c ON f.chunk_id = c.id
    JOIN nodes n ON i.node_id = n.id
WHERE i.node_id = $1
`

type GetInstancesByNodeIDRow struct {
	ID          string
	ChunkID     string
	FlavorID    string
	NodeID      string
	Port        *int32
	State       InstanceState
	CreatedAt   time.Time
	UpdatedAt   time.Time
	ID_2        string
	ChunkID_2   string
	Name        string
	CreatedAt_2 time.Time
	UpdatedAt_2 time.Time
	ID_3        string
	Name_2      string
	Description string
	Tags        []string
	CreatedAt_3 time.Time
	UpdatedAt_3 time.Time
	ID_4        string
	Address     netip.Addr
	CreatedAt_4 time.Time
}

func (q *Queries) GetInstancesByNodeID(ctx context.Context, nodeID string) ([]GetInstancesByNodeIDRow, error) {
	rows, err := q.db.Query(ctx, getInstancesByNodeID, nodeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetInstancesByNodeIDRow
	for rows.Next() {
		var i GetInstancesByNodeIDRow
		if err := rows.Scan(
			&i.ID,
			&i.ChunkID,
			&i.FlavorID,
			&i.NodeID,
			&i.Port,
			&i.State,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.ChunkID_2,
			&i.Name,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.ID_3,
			&i.Name_2,
			&i.Description,
			&i.Tags,
			&i.CreatedAt_3,
			&i.UpdatedAt_3,
			&i.ID_4,
			&i.Address,
			&i.CreatedAt_4,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const latestFlavorVersionByFlavorID = `-- name: LatestFlavorVersionByFlavorID :one
SELECT id, flavor_id, hash, version, prev_version_id, created_at FROM flavor_versions WHERE flavor_id = $1
ORDER BY created_at DESC LIMIT 1
`

func (q *Queries) LatestFlavorVersionByFlavorID(ctx context.Context, flavorID string) (FlavorVersion, error) {
	row := q.db.QueryRow(ctx, latestFlavorVersionByFlavorID, flavorID)
	var i FlavorVersion
	err := row.Scan(
		&i.ID,
		&i.FlavorID,
		&i.Hash,
		&i.Version,
		&i.PrevVersionID,
		&i.CreatedAt,
	)
	return i, err
}

const listFlavorsByChunkID = `-- name: ListFlavorsByChunkID :many
SELECT id, chunk_id, name, created_at, updated_at FROM flavors WHERE chunk_id = $1
`

func (q *Queries) ListFlavorsByChunkID(ctx context.Context, chunkID string) ([]Flavor, error) {
	rows, err := q.db.Query(ctx, listFlavorsByChunkID, chunkID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Flavor
	for rows.Next() {
		var i Flavor
		if err := rows.Scan(
			&i.ID,
			&i.ChunkID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChunk = `-- name: UpdateChunk :one
UPDATE chunks
SET
    name = $1,
    description = $2,
    tags = $3,
    updated_at = now()
WHERE id = $4
RETURNING id, name, description, tags, created_at, updated_at
`

type UpdateChunkParams struct {
	Name        string
	Description string
	Tags        []string
	ID          string
}

func (q *Queries) UpdateChunk(ctx context.Context, arg UpdateChunkParams) (Chunk, error) {
	row := q.db.QueryRow(ctx, updateChunk,
		arg.Name,
		arg.Description,
		arg.Tags,
		arg.ID,
	)
	var i Chunk
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Tags,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
