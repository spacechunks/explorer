/*
 Explorer Platform, a platform for hosting and discovering Minecraft servers.
 Copyright (C) 2024 Yannic Rieger <oss@76k.io>

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU Affero General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Affero General Public License for more details.

 You should have received a copy of the GNU Affero General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

package testdata

import (
	_ "embed"
	"fmt"
	"io"
	"io/fs"
	"os"
	"path/filepath"
	"strings"
	"testing"

	"github.com/spacechunks/explorer/internal/file"
	"github.com/stretchr/testify/require"
	"github.com/zeebo/xxh3"
)

// FullChangeSetFile is generated by executing
//
//	tar -czvf ../full_changeset.tar.gz .
//
// in the serverdata folder.
//
//go:embed full_changeset.tar.gz
var FullChangeSetFile []byte

// AddTestFileChangeSet is generated by executing
//
//	tar -czvf add_testfile_changeset.tar.gz testfile1.txt
//
// in the testdata folder.
//
//go:embed add_testfile_changeset.tar.gz
var AddTestFileChangeSet []byte

func ComputeFileHashes(t *testing.T, dir string) []file.Hash {
	hashes := make([]file.Hash, 0)
	err := filepath.WalkDir(dir, func(path string, d fs.DirEntry, err error) error {
		if d.IsDir() {
			return nil
		}

		// make ./testdata/serverdata/config/paper-global.yml to config/paper-global.yml
		rel := strings.Replace(path, filepath.Clean(dir)+"/", "", -1)

		f, err := os.Open(path)
		require.NoError(t, err)

		hasher := xxh3.New()
		_, err = io.Copy(hasher, f)
		require.NoError(t, err)

		_, err = f.Seek(0, io.SeekStart)
		require.NoError(t, err)

		hashes = append(hashes, file.Hash{
			Path: rel,
			Hash: fmt.Sprintf("%x", hasher.Sum(nil)),
		})

		return nil
	})
	require.NoError(t, err)

	return hashes
}
