package image

import (
	"bytes"
	"github.com/chunks76k/internal/image/testdata"
	"github.com/google/go-containerregistry/pkg/v1/tarball"
	"io"
	"reflect"
	"testing"
)

// use simple test, because different layer configurations are
// generated by docker build. see testdata/Dockerfile
func TestUnpackDir(t *testing.T) {
	testImgOpener := func() (io.ReadCloser, error) {
		return io.NopCloser(bytes.NewReader(testdata.Image)), nil
	}
	img, err := tarball.Image(testImgOpener, nil)
	if err != nil {
		t.Fatalf("read img: %v", err)
	}
	expected := map[string]File{
		"/a/": {
			AbsPath: "/a/",
			RelPath: "a/",
			Dir:     true,
		},
		"/a/b/": {
			AbsPath: "/a/b/",
			RelPath: "a/b/",
			Dir:     true,
		},
		"/a/b/file2": {
			AbsPath: "/a/b/file2",
			RelPath: "a/b/file2",
			Content: []byte{102, 105, 108, 101, 50, 10, 99, 104, 97, 110, 103, 101, 100, 10},
			Size:    14,
		},
		"/a/b/c/": {
			AbsPath: "/a/b/c/",
			RelPath: "a/b/c/",
			Dir:     true,
		},
		"/a/b/c/file3": {
			AbsPath: "/a/b/c/file3",
			RelPath: "a/b/c/file3",
			Content: []byte{102, 105, 108, 101, 51, 10},
			Size:    6,
		},
	}
	files, err := UnpackDir(img, "/a")
	if err != nil {
		t.Fatalf("unpack: %v", err)
	}
	if !reflect.DeepEqual(expected, files) {
		t.Logf("expected: %v", expected)
		t.Logf("got:      %v", files)
		t.Fatalf("unexpected values")
	}
}
