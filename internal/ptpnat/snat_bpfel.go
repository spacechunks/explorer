// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package ptpnat

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type snatSnatConfigEntry struct {
	IpAddr   uint32
	IfaceIdx uint8
	_        [3]byte
}

// loadSnat returns the embedded CollectionSpec for snat.
func loadSnat() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_SnatBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load snat: %w", err)
	}

	return spec, err
}

// loadSnatObjects loads snat and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*snatObjects
//	*snatPrograms
//	*snatMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadSnatObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadSnat()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// snatSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type snatSpecs struct {
	snatProgramSpecs
	snatMapSpecs
}

// snatSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type snatProgramSpecs struct {
	Snat *ebpf.ProgramSpec `ebpf:"snat"`
}

// snatMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type snatMapSpecs struct {
	SnatConfig *ebpf.MapSpec `ebpf:"snat_config"`
}

// snatObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadSnatObjects or ebpf.CollectionSpec.LoadAndAssign.
type snatObjects struct {
	snatPrograms
	snatMaps
}

func (o *snatObjects) Close() error {
	return _SnatClose(
		&o.snatPrograms,
		&o.snatMaps,
	)
}

// snatMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadSnatObjects or ebpf.CollectionSpec.LoadAndAssign.
type snatMaps struct {
	SnatConfig *ebpf.Map `ebpf:"snat_config"`
}

func (m *snatMaps) Close() error {
	return _SnatClose(
		m.SnatConfig,
	)
}

// snatPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadSnatObjects or ebpf.CollectionSpec.LoadAndAssign.
type snatPrograms struct {
	Snat *ebpf.Program `ebpf:"snat"`
}

func (p *snatPrograms) Close() error {
	return _SnatClose(
		p.Snat,
	)
}

func _SnatClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed snat_bpfel.o
var _SnatBytes []byte
