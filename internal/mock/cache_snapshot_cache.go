// Code generated by mockery. DO NOT EDIT.

package mock

import (
	context "context"

	cache "github.com/envoyproxy/go-control-plane/pkg/cache/v3"

	mock "github.com/stretchr/testify/mock"

	stream "github.com/envoyproxy/go-control-plane/pkg/server/stream/v3"
)

// MockCacheSnapshotCache is an autogenerated mock type for the SnapshotCache type
type MockCacheSnapshotCache struct {
	mock.Mock
}

type MockCacheSnapshotCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCacheSnapshotCache) EXPECT() *MockCacheSnapshotCache_Expecter {
	return &MockCacheSnapshotCache_Expecter{mock: &_m.Mock}
}

// ClearSnapshot provides a mock function with given fields: node
func (_m *MockCacheSnapshotCache) ClearSnapshot(node string) {
	_m.Called(node)
}

// MockCacheSnapshotCache_ClearSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearSnapshot'
type MockCacheSnapshotCache_ClearSnapshot_Call struct {
	*mock.Call
}

// ClearSnapshot is a helper method to define mock.On call
//   - node string
func (_e *MockCacheSnapshotCache_Expecter) ClearSnapshot(node interface{}) *MockCacheSnapshotCache_ClearSnapshot_Call {
	return &MockCacheSnapshotCache_ClearSnapshot_Call{Call: _e.mock.On("ClearSnapshot", node)}
}

func (_c *MockCacheSnapshotCache_ClearSnapshot_Call) Run(run func(node string)) *MockCacheSnapshotCache_ClearSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCacheSnapshotCache_ClearSnapshot_Call) Return() *MockCacheSnapshotCache_ClearSnapshot_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCacheSnapshotCache_ClearSnapshot_Call) RunAndReturn(run func(string)) *MockCacheSnapshotCache_ClearSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDeltaWatch provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCacheSnapshotCache) CreateDeltaWatch(_a0 *cache.DeltaRequest, _a1 stream.StreamState, _a2 chan cache.DeltaResponse) func() {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeltaWatch")
	}

	var r0 func()
	if rf, ok := ret.Get(0).(func(*cache.DeltaRequest, stream.StreamState, chan cache.DeltaResponse) func()); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func())
		}
	}

	return r0
}

// MockCacheSnapshotCache_CreateDeltaWatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDeltaWatch'
type MockCacheSnapshotCache_CreateDeltaWatch_Call struct {
	*mock.Call
}

// CreateDeltaWatch is a helper method to define mock.On call
//   - _a0 *cache.DeltaRequest
//   - _a1 stream.StreamState
//   - _a2 chan cache.DeltaResponse
func (_e *MockCacheSnapshotCache_Expecter) CreateDeltaWatch(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockCacheSnapshotCache_CreateDeltaWatch_Call {
	return &MockCacheSnapshotCache_CreateDeltaWatch_Call{Call: _e.mock.On("CreateDeltaWatch", _a0, _a1, _a2)}
}

func (_c *MockCacheSnapshotCache_CreateDeltaWatch_Call) Run(run func(_a0 *cache.DeltaRequest, _a1 stream.StreamState, _a2 chan cache.DeltaResponse)) *MockCacheSnapshotCache_CreateDeltaWatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cache.DeltaRequest), args[1].(stream.StreamState), args[2].(chan cache.DeltaResponse))
	})
	return _c
}

func (_c *MockCacheSnapshotCache_CreateDeltaWatch_Call) Return(cancel func()) *MockCacheSnapshotCache_CreateDeltaWatch_Call {
	_c.Call.Return(cancel)
	return _c
}

func (_c *MockCacheSnapshotCache_CreateDeltaWatch_Call) RunAndReturn(run func(*cache.DeltaRequest, stream.StreamState, chan cache.DeltaResponse) func()) *MockCacheSnapshotCache_CreateDeltaWatch_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWatch provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCacheSnapshotCache) CreateWatch(_a0 *cache.Request, _a1 stream.StreamState, _a2 chan cache.Response) func() {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for CreateWatch")
	}

	var r0 func()
	if rf, ok := ret.Get(0).(func(*cache.Request, stream.StreamState, chan cache.Response) func()); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func())
		}
	}

	return r0
}

// MockCacheSnapshotCache_CreateWatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWatch'
type MockCacheSnapshotCache_CreateWatch_Call struct {
	*mock.Call
}

// CreateWatch is a helper method to define mock.On call
//   - _a0 *cache.Request
//   - _a1 stream.StreamState
//   - _a2 chan cache.Response
func (_e *MockCacheSnapshotCache_Expecter) CreateWatch(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockCacheSnapshotCache_CreateWatch_Call {
	return &MockCacheSnapshotCache_CreateWatch_Call{Call: _e.mock.On("CreateWatch", _a0, _a1, _a2)}
}

func (_c *MockCacheSnapshotCache_CreateWatch_Call) Run(run func(_a0 *cache.Request, _a1 stream.StreamState, _a2 chan cache.Response)) *MockCacheSnapshotCache_CreateWatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cache.Request), args[1].(stream.StreamState), args[2].(chan cache.Response))
	})
	return _c
}

func (_c *MockCacheSnapshotCache_CreateWatch_Call) Return(cancel func()) *MockCacheSnapshotCache_CreateWatch_Call {
	_c.Call.Return(cancel)
	return _c
}

func (_c *MockCacheSnapshotCache_CreateWatch_Call) RunAndReturn(run func(*cache.Request, stream.StreamState, chan cache.Response) func()) *MockCacheSnapshotCache_CreateWatch_Call {
	_c.Call.Return(run)
	return _c
}

// Fetch provides a mock function with given fields: _a0, _a1
func (_m *MockCacheSnapshotCache) Fetch(_a0 context.Context, _a1 *cache.Request) (cache.Response, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 cache.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cache.Request) (cache.Response, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cache.Request) cache.Response); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cache.Request) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCacheSnapshotCache_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type MockCacheSnapshotCache_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cache.Request
func (_e *MockCacheSnapshotCache_Expecter) Fetch(_a0 interface{}, _a1 interface{}) *MockCacheSnapshotCache_Fetch_Call {
	return &MockCacheSnapshotCache_Fetch_Call{Call: _e.mock.On("Fetch", _a0, _a1)}
}

func (_c *MockCacheSnapshotCache_Fetch_Call) Run(run func(_a0 context.Context, _a1 *cache.Request)) *MockCacheSnapshotCache_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*cache.Request))
	})
	return _c
}

func (_c *MockCacheSnapshotCache_Fetch_Call) Return(_a0 cache.Response, _a1 error) *MockCacheSnapshotCache_Fetch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCacheSnapshotCache_Fetch_Call) RunAndReturn(run func(context.Context, *cache.Request) (cache.Response, error)) *MockCacheSnapshotCache_Fetch_Call {
	_c.Call.Return(run)
	return _c
}

// GetSnapshot provides a mock function with given fields: node
func (_m *MockCacheSnapshotCache) GetSnapshot(node string) (cache.ResourceSnapshot, error) {
	ret := _m.Called(node)

	if len(ret) == 0 {
		panic("no return value specified for GetSnapshot")
	}

	var r0 cache.ResourceSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (cache.ResourceSnapshot, error)); ok {
		return rf(node)
	}
	if rf, ok := ret.Get(0).(func(string) cache.ResourceSnapshot); ok {
		r0 = rf(node)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.ResourceSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(node)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCacheSnapshotCache_GetSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSnapshot'
type MockCacheSnapshotCache_GetSnapshot_Call struct {
	*mock.Call
}

// GetSnapshot is a helper method to define mock.On call
//   - node string
func (_e *MockCacheSnapshotCache_Expecter) GetSnapshot(node interface{}) *MockCacheSnapshotCache_GetSnapshot_Call {
	return &MockCacheSnapshotCache_GetSnapshot_Call{Call: _e.mock.On("GetSnapshot", node)}
}

func (_c *MockCacheSnapshotCache_GetSnapshot_Call) Run(run func(node string)) *MockCacheSnapshotCache_GetSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCacheSnapshotCache_GetSnapshot_Call) Return(_a0 cache.ResourceSnapshot, _a1 error) *MockCacheSnapshotCache_GetSnapshot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCacheSnapshotCache_GetSnapshot_Call) RunAndReturn(run func(string) (cache.ResourceSnapshot, error)) *MockCacheSnapshotCache_GetSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatusInfo provides a mock function with given fields: _a0
func (_m *MockCacheSnapshotCache) GetStatusInfo(_a0 string) cache.StatusInfo {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetStatusInfo")
	}

	var r0 cache.StatusInfo
	if rf, ok := ret.Get(0).(func(string) cache.StatusInfo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.StatusInfo)
		}
	}

	return r0
}

// MockCacheSnapshotCache_GetStatusInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatusInfo'
type MockCacheSnapshotCache_GetStatusInfo_Call struct {
	*mock.Call
}

// GetStatusInfo is a helper method to define mock.On call
//   - _a0 string
func (_e *MockCacheSnapshotCache_Expecter) GetStatusInfo(_a0 interface{}) *MockCacheSnapshotCache_GetStatusInfo_Call {
	return &MockCacheSnapshotCache_GetStatusInfo_Call{Call: _e.mock.On("GetStatusInfo", _a0)}
}

func (_c *MockCacheSnapshotCache_GetStatusInfo_Call) Run(run func(_a0 string)) *MockCacheSnapshotCache_GetStatusInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCacheSnapshotCache_GetStatusInfo_Call) Return(_a0 cache.StatusInfo) *MockCacheSnapshotCache_GetStatusInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheSnapshotCache_GetStatusInfo_Call) RunAndReturn(run func(string) cache.StatusInfo) *MockCacheSnapshotCache_GetStatusInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatusKeys provides a mock function with given fields:
func (_m *MockCacheSnapshotCache) GetStatusKeys() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStatusKeys")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockCacheSnapshotCache_GetStatusKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatusKeys'
type MockCacheSnapshotCache_GetStatusKeys_Call struct {
	*mock.Call
}

// GetStatusKeys is a helper method to define mock.On call
func (_e *MockCacheSnapshotCache_Expecter) GetStatusKeys() *MockCacheSnapshotCache_GetStatusKeys_Call {
	return &MockCacheSnapshotCache_GetStatusKeys_Call{Call: _e.mock.On("GetStatusKeys")}
}

func (_c *MockCacheSnapshotCache_GetStatusKeys_Call) Run(run func()) *MockCacheSnapshotCache_GetStatusKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheSnapshotCache_GetStatusKeys_Call) Return(_a0 []string) *MockCacheSnapshotCache_GetStatusKeys_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheSnapshotCache_GetStatusKeys_Call) RunAndReturn(run func() []string) *MockCacheSnapshotCache_GetStatusKeys_Call {
	_c.Call.Return(run)
	return _c
}

// SetSnapshot provides a mock function with given fields: ctx, node, snapshot
func (_m *MockCacheSnapshotCache) SetSnapshot(ctx context.Context, node string, snapshot cache.ResourceSnapshot) error {
	ret := _m.Called(ctx, node, snapshot)

	if len(ret) == 0 {
		panic("no return value specified for SetSnapshot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, cache.ResourceSnapshot) error); ok {
		r0 = rf(ctx, node, snapshot)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCacheSnapshotCache_SetSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSnapshot'
type MockCacheSnapshotCache_SetSnapshot_Call struct {
	*mock.Call
}

// SetSnapshot is a helper method to define mock.On call
//   - ctx context.Context
//   - node string
//   - snapshot cache.ResourceSnapshot
func (_e *MockCacheSnapshotCache_Expecter) SetSnapshot(ctx interface{}, node interface{}, snapshot interface{}) *MockCacheSnapshotCache_SetSnapshot_Call {
	return &MockCacheSnapshotCache_SetSnapshot_Call{Call: _e.mock.On("SetSnapshot", ctx, node, snapshot)}
}

func (_c *MockCacheSnapshotCache_SetSnapshot_Call) Run(run func(ctx context.Context, node string, snapshot cache.ResourceSnapshot)) *MockCacheSnapshotCache_SetSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(cache.ResourceSnapshot))
	})
	return _c
}

func (_c *MockCacheSnapshotCache_SetSnapshot_Call) Return(_a0 error) *MockCacheSnapshotCache_SetSnapshot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheSnapshotCache_SetSnapshot_Call) RunAndReturn(run func(context.Context, string, cache.ResourceSnapshot) error) *MockCacheSnapshotCache_SetSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCacheSnapshotCache creates a new instance of MockCacheSnapshotCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCacheSnapshotCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCacheSnapshotCache {
	mock := &MockCacheSnapshotCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
