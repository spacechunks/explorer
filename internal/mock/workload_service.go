// Code generated by mockery. DO NOT EDIT.

package mock

import (
	context "context"

	workload "github.com/spacechunks/explorer/platformd/workload"
	mock "github.com/stretchr/testify/mock"
)

// MockWorkloadService is an autogenerated mock type for the Service type
type MockWorkloadService struct {
	mock.Mock
}

type MockWorkloadService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorkloadService) EXPECT() *MockWorkloadService_Expecter {
	return &MockWorkloadService_Expecter{mock: &_m.Mock}
}

// EnsureWorkload provides a mock function with given fields: ctx, w, labelSelector
func (_m *MockWorkloadService) EnsureWorkload(ctx context.Context, w workload.Workload, labelSelector map[string]string) error {
	ret := _m.Called(ctx, w, labelSelector)

	if len(ret) == 0 {
		panic("no return value specified for EnsureWorkload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, workload.Workload, map[string]string) error); ok {
		r0 = rf(ctx, w, labelSelector)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorkloadService_EnsureWorkload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureWorkload'
type MockWorkloadService_EnsureWorkload_Call struct {
	*mock.Call
}

// EnsureWorkload is a helper method to define mock.On call
//   - ctx context.Context
//   - w workload.Workload
//   - labelSelector map[string]string
func (_e *MockWorkloadService_Expecter) EnsureWorkload(ctx interface{}, w interface{}, labelSelector interface{}) *MockWorkloadService_EnsureWorkload_Call {
	return &MockWorkloadService_EnsureWorkload_Call{Call: _e.mock.On("EnsureWorkload", ctx, w, labelSelector)}
}

func (_c *MockWorkloadService_EnsureWorkload_Call) Run(run func(ctx context.Context, w workload.Workload, labelSelector map[string]string)) *MockWorkloadService_EnsureWorkload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(workload.Workload), args[2].(map[string]string))
	})
	return _c
}

func (_c *MockWorkloadService_EnsureWorkload_Call) Return(_a0 error) *MockWorkloadService_EnsureWorkload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkloadService_EnsureWorkload_Call) RunAndReturn(run func(context.Context, workload.Workload, map[string]string) error) *MockWorkloadService_EnsureWorkload_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkloadHealth provides a mock function with given fields: ctx, id
func (_m *MockWorkloadService) GetWorkloadHealth(ctx context.Context, id string) (workload.HealthStatus, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkloadHealth")
	}

	var r0 workload.HealthStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (workload.HealthStatus, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) workload.HealthStatus); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(workload.HealthStatus)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkloadService_GetWorkloadHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkloadHealth'
type MockWorkloadService_GetWorkloadHealth_Call struct {
	*mock.Call
}

// GetWorkloadHealth is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockWorkloadService_Expecter) GetWorkloadHealth(ctx interface{}, id interface{}) *MockWorkloadService_GetWorkloadHealth_Call {
	return &MockWorkloadService_GetWorkloadHealth_Call{Call: _e.mock.On("GetWorkloadHealth", ctx, id)}
}

func (_c *MockWorkloadService_GetWorkloadHealth_Call) Run(run func(ctx context.Context, id string)) *MockWorkloadService_GetWorkloadHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockWorkloadService_GetWorkloadHealth_Call) Return(_a0 workload.HealthStatus, _a1 error) *MockWorkloadService_GetWorkloadHealth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkloadService_GetWorkloadHealth_Call) RunAndReturn(run func(context.Context, string) (workload.HealthStatus, error)) *MockWorkloadService_GetWorkloadHealth_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveWorkload provides a mock function with given fields: ctx, id
func (_m *MockWorkloadService) RemoveWorkload(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for RemoveWorkload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorkloadService_RemoveWorkload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveWorkload'
type MockWorkloadService_RemoveWorkload_Call struct {
	*mock.Call
}

// RemoveWorkload is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockWorkloadService_Expecter) RemoveWorkload(ctx interface{}, id interface{}) *MockWorkloadService_RemoveWorkload_Call {
	return &MockWorkloadService_RemoveWorkload_Call{Call: _e.mock.On("RemoveWorkload", ctx, id)}
}

func (_c *MockWorkloadService_RemoveWorkload_Call) Run(run func(ctx context.Context, id string)) *MockWorkloadService_RemoveWorkload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockWorkloadService_RemoveWorkload_Call) Return(_a0 error) *MockWorkloadService_RemoveWorkload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkloadService_RemoveWorkload_Call) RunAndReturn(run func(context.Context, string) error) *MockWorkloadService_RemoveWorkload_Call {
	_c.Call.Return(run)
	return _c
}

// RunWorkload provides a mock function with given fields: ctx, w, attempt
func (_m *MockWorkloadService) RunWorkload(ctx context.Context, w workload.Workload, attempt int) error {
	ret := _m.Called(ctx, w, attempt)

	if len(ret) == 0 {
		panic("no return value specified for RunWorkload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, workload.Workload, int) error); ok {
		r0 = rf(ctx, w, attempt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorkloadService_RunWorkload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunWorkload'
type MockWorkloadService_RunWorkload_Call struct {
	*mock.Call
}

// RunWorkload is a helper method to define mock.On call
//   - ctx context.Context
//   - w workload.Workload
//   - attempt int
func (_e *MockWorkloadService_Expecter) RunWorkload(ctx interface{}, w interface{}, attempt interface{}) *MockWorkloadService_RunWorkload_Call {
	return &MockWorkloadService_RunWorkload_Call{Call: _e.mock.On("RunWorkload", ctx, w, attempt)}
}

func (_c *MockWorkloadService_RunWorkload_Call) Run(run func(ctx context.Context, w workload.Workload, attempt int)) *MockWorkloadService_RunWorkload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(workload.Workload), args[2].(int))
	})
	return _c
}

func (_c *MockWorkloadService_RunWorkload_Call) Return(_a0 error) *MockWorkloadService_RunWorkload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkloadService_RunWorkload_Call) RunAndReturn(run func(context.Context, workload.Workload, int) error) *MockWorkloadService_RunWorkload_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWorkloadService creates a new instance of MockWorkloadService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorkloadService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorkloadService {
	mock := &MockWorkloadService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
