// Code generated by mockery. DO NOT EDIT.

package mock

import (
	status "github.com/spacechunks/explorer/platformd/status"
	mock "github.com/stretchr/testify/mock"
)

// MockStatusStore is an autogenerated mock type for the Store type
type MockStatusStore struct {
	mock.Mock
}

type MockStatusStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStatusStore) EXPECT() *MockStatusStore_Expecter {
	return &MockStatusStore_Expecter{mock: &_m.Mock}
}

// Del provides a mock function with given fields: id
func (_m *MockStatusStore) Del(id string) {
	_m.Called(id)
}

// MockStatusStore_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type MockStatusStore_Del_Call struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - id string
func (_e *MockStatusStore_Expecter) Del(id interface{}) *MockStatusStore_Del_Call {
	return &MockStatusStore_Del_Call{Call: _e.mock.On("Del", id)}
}

func (_c *MockStatusStore_Del_Call) Run(run func(id string)) *MockStatusStore_Del_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockStatusStore_Del_Call) Return() *MockStatusStore_Del_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockStatusStore_Del_Call) RunAndReturn(run func(string)) *MockStatusStore_Del_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: id
func (_m *MockStatusStore) Get(id string) *status.Status {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *status.Status
	if rf, ok := ret.Get(0).(func(string) *status.Status); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*status.Status)
		}
	}

	return r0
}

// MockStatusStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockStatusStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id string
func (_e *MockStatusStore_Expecter) Get(id interface{}) *MockStatusStore_Get_Call {
	return &MockStatusStore_Get_Call{Call: _e.mock.On("Get", id)}
}

func (_c *MockStatusStore_Get_Call) Run(run func(id string)) *MockStatusStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockStatusStore_Get_Call) Return(_a0 *status.Status) *MockStatusStore_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStatusStore_Get_Call) RunAndReturn(run func(string) *status.Status) *MockStatusStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: id, _a1
func (_m *MockStatusStore) Update(id string, _a1 status.Status) {
	_m.Called(id, _a1)
}

// MockStatusStore_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockStatusStore_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - id string
//   - _a1 status.Status
func (_e *MockStatusStore_Expecter) Update(id interface{}, _a1 interface{}) *MockStatusStore_Update_Call {
	return &MockStatusStore_Update_Call{Call: _e.mock.On("Update", id, _a1)}
}

func (_c *MockStatusStore_Update_Call) Run(run func(id string, _a1 status.Status)) *MockStatusStore_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(status.Status))
	})
	return _c
}

func (_c *MockStatusStore_Update_Call) Return() *MockStatusStore_Update_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockStatusStore_Update_Call) RunAndReturn(run func(string, status.Status)) *MockStatusStore_Update_Call {
	_c.Call.Return(run)
	return _c
}

// View provides a mock function with given fields:
func (_m *MockStatusStore) View() map[string]status.Status {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for View")
	}

	var r0 map[string]status.Status
	if rf, ok := ret.Get(0).(func() map[string]status.Status); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]status.Status)
		}
	}

	return r0
}

// MockStatusStore_View_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'View'
type MockStatusStore_View_Call struct {
	*mock.Call
}

// View is a helper method to define mock.On call
func (_e *MockStatusStore_Expecter) View() *MockStatusStore_View_Call {
	return &MockStatusStore_View_Call{Call: _e.mock.On("View")}
}

func (_c *MockStatusStore_View_Call) Run(run func()) *MockStatusStore_View_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStatusStore_View_Call) Return(_a0 map[string]status.Status) *MockStatusStore_View_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStatusStore_View_Call) RunAndReturn(run func() map[string]status.Status) *MockStatusStore_View_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStatusStore creates a new instance of MockStatusStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStatusStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStatusStore {
	mock := &MockStatusStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
