// Code generated by mockery. DO NOT EDIT.

package mock

import (
	context "context"

	blob "github.com/spacechunks/explorer/controlplane/blob"

	mock "github.com/stretchr/testify/mock"
)

// MockBlobStore is an autogenerated mock type for the Store type
type MockBlobStore struct {
	mock.Mock
}

type MockBlobStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlobStore) EXPECT() *MockBlobStore_Expecter {
	return &MockBlobStore_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, hashes
func (_m *MockBlobStore) Get(ctx context.Context, hashes []string) ([]blob.Object, error) {
	ret := _m.Called(ctx, hashes)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []blob.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]blob.Object, error)); ok {
		return rf(ctx, hashes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []blob.Object); ok {
		r0 = rf(ctx, hashes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]blob.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, hashes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlobStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockBlobStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - hashes []string
func (_e *MockBlobStore_Expecter) Get(ctx interface{}, hashes interface{}) *MockBlobStore_Get_Call {
	return &MockBlobStore_Get_Call{Call: _e.mock.On("Get", ctx, hashes)}
}

func (_c *MockBlobStore_Get_Call) Run(run func(ctx context.Context, hashes []string)) *MockBlobStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockBlobStore_Get_Call) Return(_a0 []blob.Object, _a1 error) *MockBlobStore_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlobStore_Get_Call) RunAndReturn(run func(context.Context, []string) ([]blob.Object, error)) *MockBlobStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: ctx, objects
func (_m *MockBlobStore) Put(ctx context.Context, objects []blob.Object) error {
	ret := _m.Called(ctx, objects)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []blob.Object) error); ok {
		r0 = rf(ctx, objects)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBlobStore_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockBlobStore_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - objects []blob.Object
func (_e *MockBlobStore_Expecter) Put(ctx interface{}, objects interface{}) *MockBlobStore_Put_Call {
	return &MockBlobStore_Put_Call{Call: _e.mock.On("Put", ctx, objects)}
}

func (_c *MockBlobStore_Put_Call) Run(run func(ctx context.Context, objects []blob.Object)) *MockBlobStore_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]blob.Object))
	})
	return _c
}

func (_c *MockBlobStore_Put_Call) Return(_a0 error) *MockBlobStore_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlobStore_Put_Call) RunAndReturn(run func(context.Context, []blob.Object) error) *MockBlobStore_Put_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBlobStore creates a new instance of MockBlobStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlobStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlobStore {
	mock := &MockBlobStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
