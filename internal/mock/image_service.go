// Code generated by mockery. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/google/go-containerregistry/pkg/v1"
)

// MockImageService is an autogenerated mock type for the Service type
type MockImageService struct {
	mock.Mock
}

type MockImageService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockImageService) EXPECT() *MockImageService_Expecter {
	return &MockImageService_Expecter{mock: &_m.Mock}
}

// Pull provides a mock function with given fields: ctx, imgRef, platform
func (_m *MockImageService) Pull(ctx context.Context, imgRef string, platform string) (v1.Image, error) {
	ret := _m.Called(ctx, imgRef, platform)

	if len(ret) == 0 {
		panic("no return value specified for Pull")
	}

	var r0 v1.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (v1.Image, error)); ok {
		return rf(ctx, imgRef, platform)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) v1.Image); ok {
		r0 = rf(ctx, imgRef, platform)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, imgRef, platform)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImageService_Pull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pull'
type MockImageService_Pull_Call struct {
	*mock.Call
}

// Pull is a helper method to define mock.On call
//   - ctx context.Context
//   - imgRef string
//   - platform string
func (_e *MockImageService_Expecter) Pull(ctx interface{}, imgRef interface{}, platform interface{}) *MockImageService_Pull_Call {
	return &MockImageService_Pull_Call{Call: _e.mock.On("Pull", ctx, imgRef, platform)}
}

func (_c *MockImageService_Pull_Call) Run(run func(ctx context.Context, imgRef string, platform string)) *MockImageService_Pull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockImageService_Pull_Call) Return(_a0 v1.Image, _a1 error) *MockImageService_Pull_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImageService_Pull_Call) RunAndReturn(run func(context.Context, string, string) (v1.Image, error)) *MockImageService_Pull_Call {
	_c.Call.Return(run)
	return _c
}

// Push provides a mock function with given fields: ctx, img, imgRef
func (_m *MockImageService) Push(ctx context.Context, img v1.Image, imgRef string) error {
	ret := _m.Called(ctx, img, imgRef)

	if len(ret) == 0 {
		panic("no return value specified for Push")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, v1.Image, string) error); ok {
		r0 = rf(ctx, img, imgRef)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockImageService_Push_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Push'
type MockImageService_Push_Call struct {
	*mock.Call
}

// Push is a helper method to define mock.On call
//   - ctx context.Context
//   - img v1.Image
//   - imgRef string
func (_e *MockImageService_Expecter) Push(ctx interface{}, img interface{}, imgRef interface{}) *MockImageService_Push_Call {
	return &MockImageService_Push_Call{Call: _e.mock.On("Push", ctx, img, imgRef)}
}

func (_c *MockImageService_Push_Call) Run(run func(ctx context.Context, img v1.Image, imgRef string)) *MockImageService_Push_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(v1.Image), args[2].(string))
	})
	return _c
}

func (_c *MockImageService_Push_Call) Return(_a0 error) *MockImageService_Push_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockImageService_Push_Call) RunAndReturn(run func(context.Context, v1.Image, string) error) *MockImageService_Push_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockImageService creates a new instance of MockImageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockImageService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockImageService {
	mock := &MockImageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
