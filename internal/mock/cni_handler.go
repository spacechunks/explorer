// Code generated by mockery. DO NOT EDIT.

package mock

import (
	datapath "github.com/spacechunks/platform/internal/datapath"
	mock "github.com/stretchr/testify/mock"

	net "net"
)

// MockCniHandler is an autogenerated mock type for the Handler type
type MockCniHandler struct {
	mock.Mock
}

type MockCniHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCniHandler) EXPECT() *MockCniHandler_Expecter {
	return &MockCniHandler_Expecter{mock: &_m.Mock}
}

// AddDefaultRoute provides a mock function with given fields: nsPath, veth
func (_m *MockCniHandler) AddDefaultRoute(nsPath string, veth datapath.VethPair) error {
	ret := _m.Called(nsPath, veth)

	if len(ret) == 0 {
		panic("no return value specified for AddDefaultRoute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, datapath.VethPair) error); ok {
		r0 = rf(nsPath, veth)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCniHandler_AddDefaultRoute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddDefaultRoute'
type MockCniHandler_AddDefaultRoute_Call struct {
	*mock.Call
}

// AddDefaultRoute is a helper method to define mock.On call
//   - nsPath string
//   - veth datapath.VethPair
func (_e *MockCniHandler_Expecter) AddDefaultRoute(nsPath interface{}, veth interface{}) *MockCniHandler_AddDefaultRoute_Call {
	return &MockCniHandler_AddDefaultRoute_Call{Call: _e.mock.On("AddDefaultRoute", nsPath, veth)}
}

func (_c *MockCniHandler_AddDefaultRoute_Call) Run(run func(nsPath string, veth datapath.VethPair)) *MockCniHandler_AddDefaultRoute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(datapath.VethPair))
	})
	return _c
}

func (_c *MockCniHandler_AddDefaultRoute_Call) Return(_a0 error) *MockCniHandler_AddDefaultRoute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCniHandler_AddDefaultRoute_Call) RunAndReturn(run func(string, datapath.VethPair) error) *MockCniHandler_AddDefaultRoute_Call {
	_c.Call.Return(run)
	return _c
}

// AddFullMatchRoute provides a mock function with given fields: veth
func (_m *MockCniHandler) AddFullMatchRoute(veth datapath.VethPair) error {
	ret := _m.Called(veth)

	if len(ret) == 0 {
		panic("no return value specified for AddFullMatchRoute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(datapath.VethPair) error); ok {
		r0 = rf(veth)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCniHandler_AddFullMatchRoute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFullMatchRoute'
type MockCniHandler_AddFullMatchRoute_Call struct {
	*mock.Call
}

// AddFullMatchRoute is a helper method to define mock.On call
//   - veth datapath.VethPair
func (_e *MockCniHandler_Expecter) AddFullMatchRoute(veth interface{}) *MockCniHandler_AddFullMatchRoute_Call {
	return &MockCniHandler_AddFullMatchRoute_Call{Call: _e.mock.On("AddFullMatchRoute", veth)}
}

func (_c *MockCniHandler_AddFullMatchRoute_Call) Run(run func(veth datapath.VethPair)) *MockCniHandler_AddFullMatchRoute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(datapath.VethPair))
	})
	return _c
}

func (_c *MockCniHandler_AddFullMatchRoute_Call) Return(_a0 error) *MockCniHandler_AddFullMatchRoute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCniHandler_AddFullMatchRoute_Call) RunAndReturn(run func(datapath.VethPair) error) *MockCniHandler_AddFullMatchRoute_Call {
	_c.Call.Return(run)
	return _c
}

// AllocIPs provides a mock function with given fields: plugin, stdinData
func (_m *MockCniHandler) AllocIPs(plugin string, stdinData []byte) ([]net.IPNet, error) {
	ret := _m.Called(plugin, stdinData)

	if len(ret) == 0 {
		panic("no return value specified for AllocIPs")
	}

	var r0 []net.IPNet
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []byte) ([]net.IPNet, error)); ok {
		return rf(plugin, stdinData)
	}
	if rf, ok := ret.Get(0).(func(string, []byte) []net.IPNet); ok {
		r0 = rf(plugin, stdinData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]net.IPNet)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []byte) error); ok {
		r1 = rf(plugin, stdinData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCniHandler_AllocIPs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllocIPs'
type MockCniHandler_AllocIPs_Call struct {
	*mock.Call
}

// AllocIPs is a helper method to define mock.On call
//   - plugin string
//   - stdinData []byte
func (_e *MockCniHandler_Expecter) AllocIPs(plugin interface{}, stdinData interface{}) *MockCniHandler_AllocIPs_Call {
	return &MockCniHandler_AllocIPs_Call{Call: _e.mock.On("AllocIPs", plugin, stdinData)}
}

func (_c *MockCniHandler_AllocIPs_Call) Run(run func(plugin string, stdinData []byte)) *MockCniHandler_AllocIPs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *MockCniHandler_AllocIPs_Call) Return(_a0 []net.IPNet, _a1 error) *MockCniHandler_AllocIPs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCniHandler_AllocIPs_Call) RunAndReturn(run func(string, []byte) ([]net.IPNet, error)) *MockCniHandler_AllocIPs_Call {
	_c.Call.Return(run)
	return _c
}

// AllocVethPair provides a mock function with given fields: netNS, hostAddr, podAddr
func (_m *MockCniHandler) AllocVethPair(netNS string, hostAddr net.IPNet, podAddr net.IPNet) (datapath.VethPair, error) {
	ret := _m.Called(netNS, hostAddr, podAddr)

	if len(ret) == 0 {
		panic("no return value specified for AllocVethPair")
	}

	var r0 datapath.VethPair
	var r1 error
	if rf, ok := ret.Get(0).(func(string, net.IPNet, net.IPNet) (datapath.VethPair, error)); ok {
		return rf(netNS, hostAddr, podAddr)
	}
	if rf, ok := ret.Get(0).(func(string, net.IPNet, net.IPNet) datapath.VethPair); ok {
		r0 = rf(netNS, hostAddr, podAddr)
	} else {
		r0 = ret.Get(0).(datapath.VethPair)
	}

	if rf, ok := ret.Get(1).(func(string, net.IPNet, net.IPNet) error); ok {
		r1 = rf(netNS, hostAddr, podAddr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCniHandler_AllocVethPair_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllocVethPair'
type MockCniHandler_AllocVethPair_Call struct {
	*mock.Call
}

// AllocVethPair is a helper method to define mock.On call
//   - netNS string
//   - hostAddr net.IPNet
//   - podAddr net.IPNet
func (_e *MockCniHandler_Expecter) AllocVethPair(netNS interface{}, hostAddr interface{}, podAddr interface{}) *MockCniHandler_AllocVethPair_Call {
	return &MockCniHandler_AllocVethPair_Call{Call: _e.mock.On("AllocVethPair", netNS, hostAddr, podAddr)}
}

func (_c *MockCniHandler_AllocVethPair_Call) Run(run func(netNS string, hostAddr net.IPNet, podAddr net.IPNet)) *MockCniHandler_AllocVethPair_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(net.IPNet), args[2].(net.IPNet))
	})
	return _c
}

func (_c *MockCniHandler_AllocVethPair_Call) Return(_a0 datapath.VethPair, _a1 error) *MockCniHandler_AllocVethPair_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCniHandler_AllocVethPair_Call) RunAndReturn(run func(string, net.IPNet, net.IPNet) (datapath.VethPair, error)) *MockCniHandler_AllocVethPair_Call {
	_c.Call.Return(run)
	return _c
}

// AttachCtrVethBPF provides a mock function with given fields: veth, netNS
func (_m *MockCniHandler) AttachCtrVethBPF(veth datapath.VethPair, netNS string) error {
	ret := _m.Called(veth, netNS)

	if len(ret) == 0 {
		panic("no return value specified for AttachCtrVethBPF")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(datapath.VethPair, string) error); ok {
		r0 = rf(veth, netNS)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCniHandler_AttachCtrVethBPF_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachCtrVethBPF'
type MockCniHandler_AttachCtrVethBPF_Call struct {
	*mock.Call
}

// AttachCtrVethBPF is a helper method to define mock.On call
//   - veth datapath.VethPair
//   - netNS string
func (_e *MockCniHandler_Expecter) AttachCtrVethBPF(veth interface{}, netNS interface{}) *MockCniHandler_AttachCtrVethBPF_Call {
	return &MockCniHandler_AttachCtrVethBPF_Call{Call: _e.mock.On("AttachCtrVethBPF", veth, netNS)}
}

func (_c *MockCniHandler_AttachCtrVethBPF_Call) Run(run func(veth datapath.VethPair, netNS string)) *MockCniHandler_AttachCtrVethBPF_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(datapath.VethPair), args[1].(string))
	})
	return _c
}

func (_c *MockCniHandler_AttachCtrVethBPF_Call) Return(_a0 error) *MockCniHandler_AttachCtrVethBPF_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCniHandler_AttachCtrVethBPF_Call) RunAndReturn(run func(datapath.VethPair, string) error) *MockCniHandler_AttachCtrVethBPF_Call {
	_c.Call.Return(run)
	return _c
}

// AttachDNATBPF provides a mock function with given fields: veth
func (_m *MockCniHandler) AttachDNATBPF(veth datapath.VethPair) error {
	ret := _m.Called(veth)

	if len(ret) == 0 {
		panic("no return value specified for AttachDNATBPF")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(datapath.VethPair) error); ok {
		r0 = rf(veth)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCniHandler_AttachDNATBPF_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachDNATBPF'
type MockCniHandler_AttachDNATBPF_Call struct {
	*mock.Call
}

// AttachDNATBPF is a helper method to define mock.On call
//   - veth datapath.VethPair
func (_e *MockCniHandler_Expecter) AttachDNATBPF(veth interface{}) *MockCniHandler_AttachDNATBPF_Call {
	return &MockCniHandler_AttachDNATBPF_Call{Call: _e.mock.On("AttachDNATBPF", veth)}
}

func (_c *MockCniHandler_AttachDNATBPF_Call) Run(run func(veth datapath.VethPair)) *MockCniHandler_AttachDNATBPF_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(datapath.VethPair))
	})
	return _c
}

func (_c *MockCniHandler_AttachDNATBPF_Call) Return(_a0 error) *MockCniHandler_AttachDNATBPF_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCniHandler_AttachDNATBPF_Call) RunAndReturn(run func(datapath.VethPair) error) *MockCniHandler_AttachDNATBPF_Call {
	_c.Call.Return(run)
	return _c
}

// AttachHostVethBPF provides a mock function with given fields: veth
func (_m *MockCniHandler) AttachHostVethBPF(veth datapath.VethPair) error {
	ret := _m.Called(veth)

	if len(ret) == 0 {
		panic("no return value specified for AttachHostVethBPF")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(datapath.VethPair) error); ok {
		r0 = rf(veth)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCniHandler_AttachHostVethBPF_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachHostVethBPF'
type MockCniHandler_AttachHostVethBPF_Call struct {
	*mock.Call
}

// AttachHostVethBPF is a helper method to define mock.On call
//   - veth datapath.VethPair
func (_e *MockCniHandler_Expecter) AttachHostVethBPF(veth interface{}) *MockCniHandler_AttachHostVethBPF_Call {
	return &MockCniHandler_AttachHostVethBPF_Call{Call: _e.mock.On("AttachHostVethBPF", veth)}
}

func (_c *MockCniHandler_AttachHostVethBPF_Call) Run(run func(veth datapath.VethPair)) *MockCniHandler_AttachHostVethBPF_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(datapath.VethPair))
	})
	return _c
}

func (_c *MockCniHandler_AttachHostVethBPF_Call) Return(_a0 error) *MockCniHandler_AttachHostVethBPF_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCniHandler_AttachHostVethBPF_Call) RunAndReturn(run func(datapath.VethPair) error) *MockCniHandler_AttachHostVethBPF_Call {
	_c.Call.Return(run)
	return _c
}

// ConfigureSNAT provides a mock function with given fields: ip, ifaceIndex
func (_m *MockCniHandler) ConfigureSNAT(ip net.IP, ifaceIndex uint8) error {
	ret := _m.Called(ip, ifaceIndex)

	if len(ret) == 0 {
		panic("no return value specified for ConfigureSNAT")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(net.IP, uint8) error); ok {
		r0 = rf(ip, ifaceIndex)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCniHandler_ConfigureSNAT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigureSNAT'
type MockCniHandler_ConfigureSNAT_Call struct {
	*mock.Call
}

// ConfigureSNAT is a helper method to define mock.On call
//   - ip net.IP
//   - ifaceIndex uint8
func (_e *MockCniHandler_Expecter) ConfigureSNAT(ip interface{}, ifaceIndex interface{}) *MockCniHandler_ConfigureSNAT_Call {
	return &MockCniHandler_ConfigureSNAT_Call{Call: _e.mock.On("ConfigureSNAT", ip, ifaceIndex)}
}

func (_c *MockCniHandler_ConfigureSNAT_Call) Run(run func(ip net.IP, ifaceIndex uint8)) *MockCniHandler_ConfigureSNAT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(net.IP), args[1].(uint8))
	})
	return _c
}

func (_c *MockCniHandler_ConfigureSNAT_Call) Return(_a0 error) *MockCniHandler_ConfigureSNAT_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCniHandler_ConfigureSNAT_Call) RunAndReturn(run func(net.IP, uint8) error) *MockCniHandler_ConfigureSNAT_Call {
	_c.Call.Return(run)
	return _c
}

// DeallocIPs provides a mock function with given fields: plugin, stdinData
func (_m *MockCniHandler) DeallocIPs(plugin string, stdinData []byte) error {
	ret := _m.Called(plugin, stdinData)

	if len(ret) == 0 {
		panic("no return value specified for DeallocIPs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(plugin, stdinData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCniHandler_DeallocIPs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeallocIPs'
type MockCniHandler_DeallocIPs_Call struct {
	*mock.Call
}

// DeallocIPs is a helper method to define mock.On call
//   - plugin string
//   - stdinData []byte
func (_e *MockCniHandler_Expecter) DeallocIPs(plugin interface{}, stdinData interface{}) *MockCniHandler_DeallocIPs_Call {
	return &MockCniHandler_DeallocIPs_Call{Call: _e.mock.On("DeallocIPs", plugin, stdinData)}
}

func (_c *MockCniHandler_DeallocIPs_Call) Run(run func(plugin string, stdinData []byte)) *MockCniHandler_DeallocIPs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *MockCniHandler_DeallocIPs_Call) Return(_a0 error) *MockCniHandler_DeallocIPs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCniHandler_DeallocIPs_Call) RunAndReturn(run func(string, []byte) error) *MockCniHandler_DeallocIPs_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCniHandler creates a new instance of MockCniHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCniHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCniHandler {
	mock := &MockCniHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
