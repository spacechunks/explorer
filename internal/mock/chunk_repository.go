// Code generated by mockery. DO NOT EDIT.

package mock

import (
	context "context"

	chunk "github.com/spacechunks/explorer/controlplane/chunk"

	mock "github.com/stretchr/testify/mock"
)

// MockChunkRepository is an autogenerated mock type for the Repository type
type MockChunkRepository struct {
	mock.Mock
}

type MockChunkRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChunkRepository) EXPECT() *MockChunkRepository_Expecter {
	return &MockChunkRepository_Expecter{mock: &_m.Mock}
}

// ChunkExists provides a mock function with given fields: ctx, id
func (_m *MockChunkRepository) ChunkExists(ctx context.Context, id string) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ChunkExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChunkRepository_ChunkExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChunkExists'
type MockChunkRepository_ChunkExists_Call struct {
	*mock.Call
}

// ChunkExists is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockChunkRepository_Expecter) ChunkExists(ctx interface{}, id interface{}) *MockChunkRepository_ChunkExists_Call {
	return &MockChunkRepository_ChunkExists_Call{Call: _e.mock.On("ChunkExists", ctx, id)}
}

func (_c *MockChunkRepository_ChunkExists_Call) Run(run func(ctx context.Context, id string)) *MockChunkRepository_ChunkExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockChunkRepository_ChunkExists_Call) Return(_a0 bool, _a1 error) *MockChunkRepository_ChunkExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChunkRepository_ChunkExists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockChunkRepository_ChunkExists_Call {
	_c.Call.Return(run)
	return _c
}

// CreateChunk provides a mock function with given fields: ctx, _a1
func (_m *MockChunkRepository) CreateChunk(ctx context.Context, _a1 chunk.Chunk) (chunk.Chunk, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateChunk")
	}

	var r0 chunk.Chunk
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, chunk.Chunk) (chunk.Chunk, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, chunk.Chunk) chunk.Chunk); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(chunk.Chunk)
	}

	if rf, ok := ret.Get(1).(func(context.Context, chunk.Chunk) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChunkRepository_CreateChunk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChunk'
type MockChunkRepository_CreateChunk_Call struct {
	*mock.Call
}

// CreateChunk is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 chunk.Chunk
func (_e *MockChunkRepository_Expecter) CreateChunk(ctx interface{}, _a1 interface{}) *MockChunkRepository_CreateChunk_Call {
	return &MockChunkRepository_CreateChunk_Call{Call: _e.mock.On("CreateChunk", ctx, _a1)}
}

func (_c *MockChunkRepository_CreateChunk_Call) Run(run func(ctx context.Context, _a1 chunk.Chunk)) *MockChunkRepository_CreateChunk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(chunk.Chunk))
	})
	return _c
}

func (_c *MockChunkRepository_CreateChunk_Call) Return(_a0 chunk.Chunk, _a1 error) *MockChunkRepository_CreateChunk_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChunkRepository_CreateChunk_Call) RunAndReturn(run func(context.Context, chunk.Chunk) (chunk.Chunk, error)) *MockChunkRepository_CreateChunk_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFlavor provides a mock function with given fields: ctx, chunkID, flavor
func (_m *MockChunkRepository) CreateFlavor(ctx context.Context, chunkID string, flavor chunk.Flavor) (chunk.Flavor, error) {
	ret := _m.Called(ctx, chunkID, flavor)

	if len(ret) == 0 {
		panic("no return value specified for CreateFlavor")
	}

	var r0 chunk.Flavor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, chunk.Flavor) (chunk.Flavor, error)); ok {
		return rf(ctx, chunkID, flavor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, chunk.Flavor) chunk.Flavor); ok {
		r0 = rf(ctx, chunkID, flavor)
	} else {
		r0 = ret.Get(0).(chunk.Flavor)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, chunk.Flavor) error); ok {
		r1 = rf(ctx, chunkID, flavor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChunkRepository_CreateFlavor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFlavor'
type MockChunkRepository_CreateFlavor_Call struct {
	*mock.Call
}

// CreateFlavor is a helper method to define mock.On call
//   - ctx context.Context
//   - chunkID string
//   - flavor chunk.Flavor
func (_e *MockChunkRepository_Expecter) CreateFlavor(ctx interface{}, chunkID interface{}, flavor interface{}) *MockChunkRepository_CreateFlavor_Call {
	return &MockChunkRepository_CreateFlavor_Call{Call: _e.mock.On("CreateFlavor", ctx, chunkID, flavor)}
}

func (_c *MockChunkRepository_CreateFlavor_Call) Run(run func(ctx context.Context, chunkID string, flavor chunk.Flavor)) *MockChunkRepository_CreateFlavor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(chunk.Flavor))
	})
	return _c
}

func (_c *MockChunkRepository_CreateFlavor_Call) Return(_a0 chunk.Flavor, _a1 error) *MockChunkRepository_CreateFlavor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChunkRepository_CreateFlavor_Call) RunAndReturn(run func(context.Context, string, chunk.Flavor) (chunk.Flavor, error)) *MockChunkRepository_CreateFlavor_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFlavorVersion provides a mock function with given fields: ctx, version, prevVersionID
func (_m *MockChunkRepository) CreateFlavorVersion(ctx context.Context, version chunk.FlavorVersion, prevVersionID string) (chunk.FlavorVersion, error) {
	ret := _m.Called(ctx, version, prevVersionID)

	if len(ret) == 0 {
		panic("no return value specified for CreateFlavorVersion")
	}

	var r0 chunk.FlavorVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, chunk.FlavorVersion, string) (chunk.FlavorVersion, error)); ok {
		return rf(ctx, version, prevVersionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, chunk.FlavorVersion, string) chunk.FlavorVersion); ok {
		r0 = rf(ctx, version, prevVersionID)
	} else {
		r0 = ret.Get(0).(chunk.FlavorVersion)
	}

	if rf, ok := ret.Get(1).(func(context.Context, chunk.FlavorVersion, string) error); ok {
		r1 = rf(ctx, version, prevVersionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChunkRepository_CreateFlavorVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFlavorVersion'
type MockChunkRepository_CreateFlavorVersion_Call struct {
	*mock.Call
}

// CreateFlavorVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - version chunk.FlavorVersion
//   - prevVersionID string
func (_e *MockChunkRepository_Expecter) CreateFlavorVersion(ctx interface{}, version interface{}, prevVersionID interface{}) *MockChunkRepository_CreateFlavorVersion_Call {
	return &MockChunkRepository_CreateFlavorVersion_Call{Call: _e.mock.On("CreateFlavorVersion", ctx, version, prevVersionID)}
}

func (_c *MockChunkRepository_CreateFlavorVersion_Call) Run(run func(ctx context.Context, version chunk.FlavorVersion, prevVersionID string)) *MockChunkRepository_CreateFlavorVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(chunk.FlavorVersion), args[2].(string))
	})
	return _c
}

func (_c *MockChunkRepository_CreateFlavorVersion_Call) Return(_a0 chunk.FlavorVersion, _a1 error) *MockChunkRepository_CreateFlavorVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChunkRepository_CreateFlavorVersion_Call) RunAndReturn(run func(context.Context, chunk.FlavorVersion, string) (chunk.FlavorVersion, error)) *MockChunkRepository_CreateFlavorVersion_Call {
	_c.Call.Return(run)
	return _c
}

// FlavorNameExists provides a mock function with given fields: ctx, chunkID, name
func (_m *MockChunkRepository) FlavorNameExists(ctx context.Context, chunkID string, name string) (bool, error) {
	ret := _m.Called(ctx, chunkID, name)

	if len(ret) == 0 {
		panic("no return value specified for FlavorNameExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, chunkID, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, chunkID, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, chunkID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChunkRepository_FlavorNameExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlavorNameExists'
type MockChunkRepository_FlavorNameExists_Call struct {
	*mock.Call
}

// FlavorNameExists is a helper method to define mock.On call
//   - ctx context.Context
//   - chunkID string
//   - name string
func (_e *MockChunkRepository_Expecter) FlavorNameExists(ctx interface{}, chunkID interface{}, name interface{}) *MockChunkRepository_FlavorNameExists_Call {
	return &MockChunkRepository_FlavorNameExists_Call{Call: _e.mock.On("FlavorNameExists", ctx, chunkID, name)}
}

func (_c *MockChunkRepository_FlavorNameExists_Call) Run(run func(ctx context.Context, chunkID string, name string)) *MockChunkRepository_FlavorNameExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockChunkRepository_FlavorNameExists_Call) Return(_a0 bool, _a1 error) *MockChunkRepository_FlavorNameExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChunkRepository_FlavorNameExists_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *MockChunkRepository_FlavorNameExists_Call {
	_c.Call.Return(run)
	return _c
}

// FlavorVersionByHash provides a mock function with given fields: ctx, hash
func (_m *MockChunkRepository) FlavorVersionByHash(ctx context.Context, hash string) (string, error) {
	ret := _m.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for FlavorVersionByHash")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, hash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, hash)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChunkRepository_FlavorVersionByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlavorVersionByHash'
type MockChunkRepository_FlavorVersionByHash_Call struct {
	*mock.Call
}

// FlavorVersionByHash is a helper method to define mock.On call
//   - ctx context.Context
//   - hash string
func (_e *MockChunkRepository_Expecter) FlavorVersionByHash(ctx interface{}, hash interface{}) *MockChunkRepository_FlavorVersionByHash_Call {
	return &MockChunkRepository_FlavorVersionByHash_Call{Call: _e.mock.On("FlavorVersionByHash", ctx, hash)}
}

func (_c *MockChunkRepository_FlavorVersionByHash_Call) Run(run func(ctx context.Context, hash string)) *MockChunkRepository_FlavorVersionByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockChunkRepository_FlavorVersionByHash_Call) Return(_a0 string, _a1 error) *MockChunkRepository_FlavorVersionByHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChunkRepository_FlavorVersionByHash_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockChunkRepository_FlavorVersionByHash_Call {
	_c.Call.Return(run)
	return _c
}

// FlavorVersionByID provides a mock function with given fields: ctx, id
func (_m *MockChunkRepository) FlavorVersionByID(ctx context.Context, id string) (chunk.FlavorVersion, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FlavorVersionByID")
	}

	var r0 chunk.FlavorVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (chunk.FlavorVersion, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) chunk.FlavorVersion); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(chunk.FlavorVersion)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChunkRepository_FlavorVersionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlavorVersionByID'
type MockChunkRepository_FlavorVersionByID_Call struct {
	*mock.Call
}

// FlavorVersionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockChunkRepository_Expecter) FlavorVersionByID(ctx interface{}, id interface{}) *MockChunkRepository_FlavorVersionByID_Call {
	return &MockChunkRepository_FlavorVersionByID_Call{Call: _e.mock.On("FlavorVersionByID", ctx, id)}
}

func (_c *MockChunkRepository_FlavorVersionByID_Call) Run(run func(ctx context.Context, id string)) *MockChunkRepository_FlavorVersionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockChunkRepository_FlavorVersionByID_Call) Return(_a0 chunk.FlavorVersion, _a1 error) *MockChunkRepository_FlavorVersionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChunkRepository_FlavorVersionByID_Call) RunAndReturn(run func(context.Context, string) (chunk.FlavorVersion, error)) *MockChunkRepository_FlavorVersionByID_Call {
	_c.Call.Return(run)
	return _c
}

// FlavorVersionExists provides a mock function with given fields: ctx, flavorID, version
func (_m *MockChunkRepository) FlavorVersionExists(ctx context.Context, flavorID string, version string) (bool, error) {
	ret := _m.Called(ctx, flavorID, version)

	if len(ret) == 0 {
		panic("no return value specified for FlavorVersionExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, flavorID, version)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, flavorID, version)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, flavorID, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChunkRepository_FlavorVersionExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlavorVersionExists'
type MockChunkRepository_FlavorVersionExists_Call struct {
	*mock.Call
}

// FlavorVersionExists is a helper method to define mock.On call
//   - ctx context.Context
//   - flavorID string
//   - version string
func (_e *MockChunkRepository_Expecter) FlavorVersionExists(ctx interface{}, flavorID interface{}, version interface{}) *MockChunkRepository_FlavorVersionExists_Call {
	return &MockChunkRepository_FlavorVersionExists_Call{Call: _e.mock.On("FlavorVersionExists", ctx, flavorID, version)}
}

func (_c *MockChunkRepository_FlavorVersionExists_Call) Run(run func(ctx context.Context, flavorID string, version string)) *MockChunkRepository_FlavorVersionExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockChunkRepository_FlavorVersionExists_Call) Return(_a0 bool, _a1 error) *MockChunkRepository_FlavorVersionExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChunkRepository_FlavorVersionExists_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *MockChunkRepository_FlavorVersionExists_Call {
	_c.Call.Return(run)
	return _c
}

// FlavorVersionHashByID provides a mock function with given fields: ctx, id
func (_m *MockChunkRepository) FlavorVersionHashByID(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FlavorVersionHashByID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChunkRepository_FlavorVersionHashByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlavorVersionHashByID'
type MockChunkRepository_FlavorVersionHashByID_Call struct {
	*mock.Call
}

// FlavorVersionHashByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockChunkRepository_Expecter) FlavorVersionHashByID(ctx interface{}, id interface{}) *MockChunkRepository_FlavorVersionHashByID_Call {
	return &MockChunkRepository_FlavorVersionHashByID_Call{Call: _e.mock.On("FlavorVersionHashByID", ctx, id)}
}

func (_c *MockChunkRepository_FlavorVersionHashByID_Call) Run(run func(ctx context.Context, id string)) *MockChunkRepository_FlavorVersionHashByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockChunkRepository_FlavorVersionHashByID_Call) Return(_a0 string, _a1 error) *MockChunkRepository_FlavorVersionHashByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChunkRepository_FlavorVersionHashByID_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockChunkRepository_FlavorVersionHashByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetChunkByID provides a mock function with given fields: ctx, id
func (_m *MockChunkRepository) GetChunkByID(ctx context.Context, id string) (chunk.Chunk, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetChunkByID")
	}

	var r0 chunk.Chunk
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (chunk.Chunk, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) chunk.Chunk); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(chunk.Chunk)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChunkRepository_GetChunkByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChunkByID'
type MockChunkRepository_GetChunkByID_Call struct {
	*mock.Call
}

// GetChunkByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockChunkRepository_Expecter) GetChunkByID(ctx interface{}, id interface{}) *MockChunkRepository_GetChunkByID_Call {
	return &MockChunkRepository_GetChunkByID_Call{Call: _e.mock.On("GetChunkByID", ctx, id)}
}

func (_c *MockChunkRepository_GetChunkByID_Call) Run(run func(ctx context.Context, id string)) *MockChunkRepository_GetChunkByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockChunkRepository_GetChunkByID_Call) Return(_a0 chunk.Chunk, _a1 error) *MockChunkRepository_GetChunkByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChunkRepository_GetChunkByID_Call) RunAndReturn(run func(context.Context, string) (chunk.Chunk, error)) *MockChunkRepository_GetChunkByID_Call {
	_c.Call.Return(run)
	return _c
}

// LatestFlavorVersion provides a mock function with given fields: ctx, flavorID
func (_m *MockChunkRepository) LatestFlavorVersion(ctx context.Context, flavorID string) (chunk.FlavorVersion, error) {
	ret := _m.Called(ctx, flavorID)

	if len(ret) == 0 {
		panic("no return value specified for LatestFlavorVersion")
	}

	var r0 chunk.FlavorVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (chunk.FlavorVersion, error)); ok {
		return rf(ctx, flavorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) chunk.FlavorVersion); ok {
		r0 = rf(ctx, flavorID)
	} else {
		r0 = ret.Get(0).(chunk.FlavorVersion)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, flavorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChunkRepository_LatestFlavorVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LatestFlavorVersion'
type MockChunkRepository_LatestFlavorVersion_Call struct {
	*mock.Call
}

// LatestFlavorVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - flavorID string
func (_e *MockChunkRepository_Expecter) LatestFlavorVersion(ctx interface{}, flavorID interface{}) *MockChunkRepository_LatestFlavorVersion_Call {
	return &MockChunkRepository_LatestFlavorVersion_Call{Call: _e.mock.On("LatestFlavorVersion", ctx, flavorID)}
}

func (_c *MockChunkRepository_LatestFlavorVersion_Call) Run(run func(ctx context.Context, flavorID string)) *MockChunkRepository_LatestFlavorVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockChunkRepository_LatestFlavorVersion_Call) Return(_a0 chunk.FlavorVersion, _a1 error) *MockChunkRepository_LatestFlavorVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChunkRepository_LatestFlavorVersion_Call) RunAndReturn(run func(context.Context, string) (chunk.FlavorVersion, error)) *MockChunkRepository_LatestFlavorVersion_Call {
	_c.Call.Return(run)
	return _c
}

// ListChunks provides a mock function with given fields: ctx
func (_m *MockChunkRepository) ListChunks(ctx context.Context) ([]chunk.Chunk, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListChunks")
	}

	var r0 []chunk.Chunk
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]chunk.Chunk, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []chunk.Chunk); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]chunk.Chunk)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChunkRepository_ListChunks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListChunks'
type MockChunkRepository_ListChunks_Call struct {
	*mock.Call
}

// ListChunks is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockChunkRepository_Expecter) ListChunks(ctx interface{}) *MockChunkRepository_ListChunks_Call {
	return &MockChunkRepository_ListChunks_Call{Call: _e.mock.On("ListChunks", ctx)}
}

func (_c *MockChunkRepository_ListChunks_Call) Run(run func(ctx context.Context)) *MockChunkRepository_ListChunks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockChunkRepository_ListChunks_Call) Return(_a0 []chunk.Chunk, _a1 error) *MockChunkRepository_ListChunks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChunkRepository_ListChunks_Call) RunAndReturn(run func(context.Context) ([]chunk.Chunk, error)) *MockChunkRepository_ListChunks_Call {
	_c.Call.Return(run)
	return _c
}

// MarkFlavorVersionFilesUploaded provides a mock function with given fields: ctx, flavorVersionID
func (_m *MockChunkRepository) MarkFlavorVersionFilesUploaded(ctx context.Context, flavorVersionID string) error {
	ret := _m.Called(ctx, flavorVersionID)

	if len(ret) == 0 {
		panic("no return value specified for MarkFlavorVersionFilesUploaded")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, flavorVersionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockChunkRepository_MarkFlavorVersionFilesUploaded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkFlavorVersionFilesUploaded'
type MockChunkRepository_MarkFlavorVersionFilesUploaded_Call struct {
	*mock.Call
}

// MarkFlavorVersionFilesUploaded is a helper method to define mock.On call
//   - ctx context.Context
//   - flavorVersionID string
func (_e *MockChunkRepository_Expecter) MarkFlavorVersionFilesUploaded(ctx interface{}, flavorVersionID interface{}) *MockChunkRepository_MarkFlavorVersionFilesUploaded_Call {
	return &MockChunkRepository_MarkFlavorVersionFilesUploaded_Call{Call: _e.mock.On("MarkFlavorVersionFilesUploaded", ctx, flavorVersionID)}
}

func (_c *MockChunkRepository_MarkFlavorVersionFilesUploaded_Call) Run(run func(ctx context.Context, flavorVersionID string)) *MockChunkRepository_MarkFlavorVersionFilesUploaded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockChunkRepository_MarkFlavorVersionFilesUploaded_Call) Return(_a0 error) *MockChunkRepository_MarkFlavorVersionFilesUploaded_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChunkRepository_MarkFlavorVersionFilesUploaded_Call) RunAndReturn(run func(context.Context, string) error) *MockChunkRepository_MarkFlavorVersionFilesUploaded_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateChunk provides a mock function with given fields: ctx, _a1
func (_m *MockChunkRepository) UpdateChunk(ctx context.Context, _a1 chunk.Chunk) (chunk.Chunk, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChunk")
	}

	var r0 chunk.Chunk
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, chunk.Chunk) (chunk.Chunk, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, chunk.Chunk) chunk.Chunk); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(chunk.Chunk)
	}

	if rf, ok := ret.Get(1).(func(context.Context, chunk.Chunk) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChunkRepository_UpdateChunk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateChunk'
type MockChunkRepository_UpdateChunk_Call struct {
	*mock.Call
}

// UpdateChunk is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 chunk.Chunk
func (_e *MockChunkRepository_Expecter) UpdateChunk(ctx interface{}, _a1 interface{}) *MockChunkRepository_UpdateChunk_Call {
	return &MockChunkRepository_UpdateChunk_Call{Call: _e.mock.On("UpdateChunk", ctx, _a1)}
}

func (_c *MockChunkRepository_UpdateChunk_Call) Run(run func(ctx context.Context, _a1 chunk.Chunk)) *MockChunkRepository_UpdateChunk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(chunk.Chunk))
	})
	return _c
}

func (_c *MockChunkRepository_UpdateChunk_Call) Return(_a0 chunk.Chunk, _a1 error) *MockChunkRepository_UpdateChunk_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChunkRepository_UpdateChunk_Call) RunAndReturn(run func(context.Context, chunk.Chunk) (chunk.Chunk, error)) *MockChunkRepository_UpdateChunk_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChunkRepository creates a new instance of MockChunkRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChunkRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChunkRepository {
	mock := &MockChunkRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
