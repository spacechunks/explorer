// Code generated by mockery. DO NOT EDIT.

package mock

import (
	context "context"

	cri "github.com/spacechunks/explorer/platformd/cri"
	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/cri-api/pkg/apis/runtime/v1"
)

// MockCriService is an autogenerated mock type for the Service type
type MockCriService struct {
	mock.Mock
}

type MockCriService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCriService) EXPECT() *MockCriService_Expecter {
	return &MockCriService_Expecter{mock: &_m.Mock}
}

// EnsureImage provides a mock function with given fields: ctx, imageURL
func (_m *MockCriService) EnsureImage(ctx context.Context, imageURL string) error {
	ret := _m.Called(ctx, imageURL)

	if len(ret) == 0 {
		panic("no return value specified for EnsureImage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, imageURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCriService_EnsureImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureImage'
type MockCriService_EnsureImage_Call struct {
	*mock.Call
}

// EnsureImage is a helper method to define mock.On call
//   - ctx context.Context
//   - imageURL string
func (_e *MockCriService_Expecter) EnsureImage(ctx interface{}, imageURL interface{}) *MockCriService_EnsureImage_Call {
	return &MockCriService_EnsureImage_Call{Call: _e.mock.On("EnsureImage", ctx, imageURL)}
}

func (_c *MockCriService_EnsureImage_Call) Run(run func(ctx context.Context, imageURL string)) *MockCriService_EnsureImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCriService_EnsureImage_Call) Return(_a0 error) *MockCriService_EnsureImage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCriService_EnsureImage_Call) RunAndReturn(run func(context.Context, string) error) *MockCriService_EnsureImage_Call {
	_c.Call.Return(run)
	return _c
}

// EnsurePod provides a mock function with given fields: ctx, opts
func (_m *MockCriService) EnsurePod(ctx context.Context, opts cri.RunOptions) error {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for EnsurePod")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cri.RunOptions) error); ok {
		r0 = rf(ctx, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCriService_EnsurePod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsurePod'
type MockCriService_EnsurePod_Call struct {
	*mock.Call
}

// EnsurePod is a helper method to define mock.On call
//   - ctx context.Context
//   - opts cri.RunOptions
func (_e *MockCriService_Expecter) EnsurePod(ctx interface{}, opts interface{}) *MockCriService_EnsurePod_Call {
	return &MockCriService_EnsurePod_Call{Call: _e.mock.On("EnsurePod", ctx, opts)}
}

func (_c *MockCriService_EnsurePod_Call) Run(run func(ctx context.Context, opts cri.RunOptions)) *MockCriService_EnsurePod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cri.RunOptions))
	})
	return _c
}

func (_c *MockCriService_EnsurePod_Call) Return(_a0 error) *MockCriService_EnsurePod_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCriService_EnsurePod_Call) RunAndReturn(run func(context.Context, cri.RunOptions) error) *MockCriService_EnsurePod_Call {
	_c.Call.Return(run)
	return _c
}

// GetRuntimeClient provides a mock function with given fields:
func (_m *MockCriService) GetRuntimeClient() v1.RuntimeServiceClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRuntimeClient")
	}

	var r0 v1.RuntimeServiceClient
	if rf, ok := ret.Get(0).(func() v1.RuntimeServiceClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.RuntimeServiceClient)
		}
	}

	return r0
}

// MockCriService_GetRuntimeClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRuntimeClient'
type MockCriService_GetRuntimeClient_Call struct {
	*mock.Call
}

// GetRuntimeClient is a helper method to define mock.On call
func (_e *MockCriService_Expecter) GetRuntimeClient() *MockCriService_GetRuntimeClient_Call {
	return &MockCriService_GetRuntimeClient_Call{Call: _e.mock.On("GetRuntimeClient")}
}

func (_c *MockCriService_GetRuntimeClient_Call) Run(run func()) *MockCriService_GetRuntimeClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCriService_GetRuntimeClient_Call) Return(_a0 v1.RuntimeServiceClient) *MockCriService_GetRuntimeClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCriService_GetRuntimeClient_Call) RunAndReturn(run func() v1.RuntimeServiceClient) *MockCriService_GetRuntimeClient_Call {
	_c.Call.Return(run)
	return _c
}

// RunContainer provides a mock function with given fields: ctx, req
func (_m *MockCriService) RunContainer(ctx context.Context, req *v1.CreateContainerRequest) (string, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RunContainer")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CreateContainerRequest) (string, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CreateContainerRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.CreateContainerRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCriService_RunContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunContainer'
type MockCriService_RunContainer_Call struct {
	*mock.Call
}

// RunContainer is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.CreateContainerRequest
func (_e *MockCriService_Expecter) RunContainer(ctx interface{}, req interface{}) *MockCriService_RunContainer_Call {
	return &MockCriService_RunContainer_Call{Call: _e.mock.On("RunContainer", ctx, req)}
}

func (_c *MockCriService_RunContainer_Call) Run(run func(ctx context.Context, req *v1.CreateContainerRequest)) *MockCriService_RunContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.CreateContainerRequest))
	})
	return _c
}

func (_c *MockCriService_RunContainer_Call) Return(_a0 string, _a1 error) *MockCriService_RunContainer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCriService_RunContainer_Call) RunAndReturn(run func(context.Context, *v1.CreateContainerRequest) (string, error)) *MockCriService_RunContainer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCriService creates a new instance of MockCriService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCriService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCriService {
	mock := &MockCriService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
