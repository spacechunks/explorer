// Code generated by mockery. DO NOT EDIT.

package mock

import (
	context "context"

	node "github.com/spacechunks/explorer/controlplane/node"
	mock "github.com/stretchr/testify/mock"
)

// MockNodeRepository is an autogenerated mock type for the Repository type
type MockNodeRepository struct {
	mock.Mock
}

type MockNodeRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNodeRepository) EXPECT() *MockNodeRepository_Expecter {
	return &MockNodeRepository_Expecter{mock: &_m.Mock}
}

// RandomNode provides a mock function with given fields: ctx
func (_m *MockNodeRepository) RandomNode(ctx context.Context) (node.Node, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RandomNode")
	}

	var r0 node.Node
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (node.Node, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) node.Node); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(node.Node)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNodeRepository_RandomNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RandomNode'
type MockNodeRepository_RandomNode_Call struct {
	*mock.Call
}

// RandomNode is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNodeRepository_Expecter) RandomNode(ctx interface{}) *MockNodeRepository_RandomNode_Call {
	return &MockNodeRepository_RandomNode_Call{Call: _e.mock.On("RandomNode", ctx)}
}

func (_c *MockNodeRepository_RandomNode_Call) Run(run func(ctx context.Context)) *MockNodeRepository_RandomNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockNodeRepository_RandomNode_Call) Return(_a0 node.Node, _a1 error) *MockNodeRepository_RandomNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNodeRepository_RandomNode_Call) RunAndReturn(run func(context.Context) (node.Node, error)) *MockNodeRepository_RandomNode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNodeRepository creates a new instance of MockNodeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNodeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNodeRepository {
	mock := &MockNodeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
