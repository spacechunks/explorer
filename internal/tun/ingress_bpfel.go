// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package tun

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadIngress returns the embedded CollectionSpec for ingress.
func loadIngress() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_IngressBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load ingress: %w", err)
	}

	return spec, err
}

// loadIngressObjects loads ingress and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*ingressObjects
//	*ingressPrograms
//	*ingressMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadIngressObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadIngress()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// ingressSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ingressSpecs struct {
	ingressProgramSpecs
	ingressMapSpecs
}

// ingressSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ingressProgramSpecs struct {
	Ingress *ebpf.ProgramSpec `ebpf:"ingress"`
}

// ingressMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ingressMapSpecs struct {
}

// ingressObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadIngressObjects or ebpf.CollectionSpec.LoadAndAssign.
type ingressObjects struct {
	ingressPrograms
	ingressMaps
}

func (o *ingressObjects) Close() error {
	return _IngressClose(
		&o.ingressPrograms,
		&o.ingressMaps,
	)
}

// ingressMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadIngressObjects or ebpf.CollectionSpec.LoadAndAssign.
type ingressMaps struct {
}

func (m *ingressMaps) Close() error {
	return _IngressClose()
}

// ingressPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadIngressObjects or ebpf.CollectionSpec.LoadAndAssign.
type ingressPrograms struct {
	Ingress *ebpf.Program `ebpf:"ingress"`
}

func (p *ingressPrograms) Close() error {
	return _IngressClose(
		p.Ingress,
	)
}

func _IngressClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed ingress_bpfel.o
var _IngressBytes []byte
