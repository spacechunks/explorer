// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package datapath

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type tproxyOriginalDstEntry struct {
	IpAddr uint32
	Port   uint16
	_      [2]byte
}

type tproxyVethPair struct {
	HostIfIndex uint32
	HostIfAddr  uint32
}

// loadTproxy returns the embedded CollectionSpec for tproxy.
func loadTproxy() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TproxyBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load tproxy: %w", err)
	}

	return spec, err
}

// loadTproxyObjects loads tproxy and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*tproxyObjects
//	*tproxyPrograms
//	*tproxyMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTproxyObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTproxy()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// tproxySpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tproxySpecs struct {
	tproxyProgramSpecs
	tproxyMapSpecs
}

// tproxySpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tproxyProgramSpecs struct {
	CtrPeerEgress  *ebpf.ProgramSpec `ebpf:"ctr_peer_egress"`
	Getsockopt     *ebpf.ProgramSpec `ebpf:"getsockopt"`
	HostPeerEgress *ebpf.ProgramSpec `ebpf:"host_peer_egress"`
}

// tproxyMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tproxyMapSpecs struct {
	OriginalDstMap *ebpf.MapSpec `ebpf:"original_dst_map"`
	VethPairMap    *ebpf.MapSpec `ebpf:"veth_pair_map"`
}

// tproxyObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTproxyObjects or ebpf.CollectionSpec.LoadAndAssign.
type tproxyObjects struct {
	tproxyPrograms
	tproxyMaps
}

func (o *tproxyObjects) Close() error {
	return _TproxyClose(
		&o.tproxyPrograms,
		&o.tproxyMaps,
	)
}

// tproxyMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTproxyObjects or ebpf.CollectionSpec.LoadAndAssign.
type tproxyMaps struct {
	OriginalDstMap *ebpf.Map `ebpf:"original_dst_map"`
	VethPairMap    *ebpf.Map `ebpf:"veth_pair_map"`
}

func (m *tproxyMaps) Close() error {
	return _TproxyClose(
		m.OriginalDstMap,
		m.VethPairMap,
	)
}

// tproxyPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTproxyObjects or ebpf.CollectionSpec.LoadAndAssign.
type tproxyPrograms struct {
	CtrPeerEgress  *ebpf.Program `ebpf:"ctr_peer_egress"`
	Getsockopt     *ebpf.Program `ebpf:"getsockopt"`
	HostPeerEgress *ebpf.Program `ebpf:"host_peer_egress"`
}

func (p *tproxyPrograms) Close() error {
	return _TproxyClose(
		p.CtrPeerEgress,
		p.Getsockopt,
		p.HostPeerEgress,
	)
}

func _TproxyClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed tproxy_bpfeb.o
var _TproxyBytes []byte
