// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package datapath

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type dnatDnatTarget struct {
	IpAddr   uint32
	IfaceIdx uint8
	MacAddr  [6]uint8
	_        [1]byte
}

// loadDnat returns the embedded CollectionSpec for dnat.
func loadDnat() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_DnatBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load dnat: %w", err)
	}

	return spec, err
}

// loadDnatObjects loads dnat and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*dnatObjects
//	*dnatPrograms
//	*dnatMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadDnatObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadDnat()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// dnatSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type dnatSpecs struct {
	dnatProgramSpecs
	dnatMapSpecs
}

// dnatSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type dnatProgramSpecs struct {
	Dnat *ebpf.ProgramSpec `ebpf:"dnat"`
}

// dnatMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type dnatMapSpecs struct {
	PtpDnatTargets *ebpf.MapSpec `ebpf:"ptp_dnat_targets"`
}

// dnatObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadDnatObjects or ebpf.CollectionSpec.LoadAndAssign.
type dnatObjects struct {
	dnatPrograms
	dnatMaps
}

func (o *dnatObjects) Close() error {
	return _DnatClose(
		&o.dnatPrograms,
		&o.dnatMaps,
	)
}

// dnatMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadDnatObjects or ebpf.CollectionSpec.LoadAndAssign.
type dnatMaps struct {
	PtpDnatTargets *ebpf.Map `ebpf:"ptp_dnat_targets"`
}

func (m *dnatMaps) Close() error {
	return _DnatClose(
		m.PtpDnatTargets,
	)
}

// dnatPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadDnatObjects or ebpf.CollectionSpec.LoadAndAssign.
type dnatPrograms struct {
	Dnat *ebpf.Program `ebpf:"dnat"`
}

func (p *dnatPrograms) Close() error {
	return _DnatClose(
		p.Dnat,
	)
}

func _DnatClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed dnat_bpfel.o
var _DnatBytes []byte
